<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不正经数据科学家</title>
  
  <subtitle>Enjoy everything fun and challenging</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://frankchen.xyz/"/>
  <updated>2019-10-24T09:43:35.920Z</updated>
  <id>http://frankchen.xyz/</id>
  
  <author>
    <name>江南消夏</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用python 自动计算亚马逊vat税款</title>
    <link href="http://frankchen.xyz/2019/10/24/amazon-vat-cal/"/>
    <id>http://frankchen.xyz/2019/10/24/amazon-vat-cal/</id>
    <published>2019-10-24T09:17:01.000Z</published>
    <updated>2019-10-24T09:43:35.920Z</updated>
    
    <content type="html"><![CDATA[<p>简述下如何使用pandas计算亚马逊英国vat税款，纯粹是pandas的业务代码。<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#%%</span></div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="comment">#%%</span></div><div class="line">vat_csv = <span class="string">r"C:\Users\Administrator\Downloads\18168935102018178.csv"</span></div><div class="line"></div><div class="line">df = pd.read_csv(vat_csv)</div><div class="line"><span class="comment">#%%</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_free_tax_zone_post_code</span><span class="params">(x : str)</span>:</span></div><div class="line">    <span class="keyword">if</span> type(x) <span class="keyword">is</span> <span class="keyword">not</span> str:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> x.startswith(<span class="string">'JE'</span>) <span class="keyword">or</span> x.startswith(<span class="string">'GY'</span>)</div><div class="line"><span class="comment"># # BN列邮编首字母为JE和GY的，是英国的附属岛屿，目前有免税优惠，不用计算</span></div><div class="line">df = df[~df[<span class="string">'ARRIVAL_POST_CODE'</span>].apply(filter_free_tax_zone_post_code)].copy()</div><div class="line"></div><div class="line"><span class="comment">#%%</span></div><div class="line"><span class="comment"># BO  SALE_DEPART_COUNTRY 发货国家 BP  SALE_ARRIVAL_COUNTRY 收货国家</span></div><div class="line"><span class="comment"># AZ TOTAL_ACTIVITY_VALUE_AMT_VAT_INCL 销售额 BA  TRANSACTION_CURRENCY_CODE 货币</span></div><div class="line">df[<span class="string">'SALE_DEPART_COUNTRY'</span>].value_counts()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#%%</span></div><div class="line">SALE_ARRIVAL_COUNTRY_ = df[<span class="string">'SALE_ARRIVAL_COUNTRY'</span>].value_counts().index</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#%%</span></div><div class="line">euro_nation_code_excel = <span class="string">'euro-nation-code.xlsx'</span></div><div class="line">euro_country = pd.read_excel(euro_nation_code_excel)[<span class="string">'CODE'</span>].values</div><div class="line"></div><div class="line"><span class="comment">#%%</span></div><div class="line"><span class="comment"># step 1</span></div><div class="line">A = df[df[<span class="string">'SALE_DEPART_COUNTRY'</span>].isin(euro_country)]</div><div class="line">step_1_df = A[A[<span class="string">'SALE_ARRIVAL_COUNTRY'</span>] == <span class="string">'GB'</span>]</div><div class="line">step_1 = step_1_df[[<span class="string">'TOTAL_ACTIVITY_VALUE_AMT_VAT_INCL'</span>, <span class="string">'TRANSACTION_CURRENCY_CODE'</span>]].groupby([<span class="string">'TRANSACTION_CURRENCY_CODE'</span>]).sum()</div><div class="line"></div><div class="line">step_1 = step_1[<span class="string">'TOTAL_ACTIVITY_VALUE_AMT_VAT_INCL'</span>].to_dict()</div><div class="line">step_1</div><div class="line"><span class="comment">#%%</span></div><div class="line"><span class="comment"># step 2</span></div><div class="line">A = df[df[<span class="string">'SALE_DEPART_COUNTRY'</span>] == <span class="string">'GB'</span>]</div><div class="line">except_country = <span class="string">"DE GB ES IT FR"</span>.split(<span class="string">' '</span>)</div><div class="line">sub_euro_country = [i <span class="keyword">for</span> i <span class="keyword">in</span> euro_country <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> except_country]</div><div class="line">step_2_df = A[A[<span class="string">'SALE_ARRIVAL_COUNTRY'</span>] .isin(sub_euro_country)]</div><div class="line">step_2 = step_2_df[[<span class="string">'TOTAL_ACTIVITY_VALUE_AMT_VAT_INCL'</span>, <span class="string">'TRANSACTION_CURRENCY_CODE'</span>]].groupby([<span class="string">'TRANSACTION_CURRENCY_CODE'</span>]).sum()</div><div class="line">step_2 = step_2[<span class="string">'TOTAL_ACTIVITY_VALUE_AMT_VAT_INCL'</span>].to_dict()</div><div class="line">step_2</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#%%</span></div><div class="line"><span class="comment"># TOTAL</span></div><div class="line">euro2gbp = <span class="number">0.8637</span></div><div class="line"><span class="comment"># euro2gbp = 1 / 1.1504</span></div><div class="line">tax_rate = <span class="number">0.155</span></div><div class="line">other = <span class="number">26510.48</span></div><div class="line"></div><div class="line">euro = step_1.get(<span class="string">'EUR'</span>, <span class="number">0</span>) + step_2.get(<span class="string">'EUR'</span>, <span class="number">0</span>)</div><div class="line">gbp = step_1.get(<span class="string">'GBP'</span>, <span class="number">0</span>) + step_2.get(<span class="string">'GBP'</span>, <span class="number">0</span>)</div><div class="line">total = gbp + euro2gbp * euro</div><div class="line"></div><div class="line">vat = round(total * tax_rate, <span class="number">2</span>)</div><div class="line"></div><div class="line">vat</div><div class="line"><span class="comment">#%%</span></div><div class="line">s = f<span class="string">"""第一步中算的英镑 &#123;step_1.get('GBP', 0) :.2f&#125; 欧元 &#123;step_1.get('EUR', 0) :.2f&#125;，</span></div><div class="line">第二步中算的英镑 &#123;step_2.get('GBP', 0) :.2f&#125; 欧元 &#123;step_2.get('EUR', 0) :.2f&#125;，</div><div class="line">共计 英镑 &#123;gbp :.2f&#125;元，欧元&#123;euro :.2f&#125;元，</div><div class="line">按照当前欧元兑英镑汇率为 &#123;euro2gbp :.2f&#125;，</div><div class="line">共计英镑 &#123;total :.2f&#125; 元，</div><div class="line">按照vat税率 &#123;tax_rate&#125;</div><div class="line">计算的vat税款为 &#123;vat&#125; 元</div><div class="line">与提供的数据差值为 &#123;vat - other :.2f&#125; 元</div><div class="line">"""</div><div class="line"></div><div class="line">print(s)</div></pre></td></tr></table></figure></p><p>附赠欧盟28国的国家代码，当前（2019-10-24）英国还算是欧盟国家</p><blockquote><p>德国DE<br>荷兰NL<br>比利时BE<br>卢森堡LU<br>法国FR<br>意大利IT<br>丹麦DK<br>英国GB<br>爱尔兰IE<br>希腊GR<br>西班牙ES<br>葡萄牙PT<br>瑞典SE<br>芬兰FI<br>奥地利AT<br>塞浦路斯CY<br>爱沙尼亚EE<br>拉脱维亚LV<br>立陶宛LT<br>波兰PL<br>捷克CZ<br>斯洛伐克SK<br>斯洛文尼亚SI<br>匈牙利HU<br>马耳他MT<br>罗马尼亚RO<br>保加利亚BG<br>克罗地亚HR</p></blockquote><p>现在Pycharm对于jupyter notebook的支持也很好了，我基本上直接在IDE里面写，这个主题是Gradianto Dark Fuchsia，Jetbrains官网可以下载，PyCharm不是只有Darcula的，好了，我大约一年没有更了，现在正式回归了，我现在做的是电商行业，以后我也许会更多的是生产力软件、爬虫与数据分析、企业系统方面转了，从来就不是正经的数据科学家。生命过程很复杂很丰富，继续做个顽强的人，祝大家<strong>1024程序员节快乐</strong>，我还算程序员的吧🤣哈哈哈</p><p><img src="../images/0CF117DD-382B-4CA8-A4B1-BA4C83BF3A89.png" alt="0CF117DD-382B-4CA8-A4B1-BA4C83BF3A89"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简述下如何使用pandas计算亚马逊英国vat税款，纯粹是pandas的业务代码。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://frankchen.xyz/tags/python/"/>
    
      <category term="Deep Learning" scheme="http://frankchen.xyz/tags/Deep-Learning/"/>
    
      <category term="amazon" scheme="http://frankchen.xyz/tags/amazon/"/>
    
      <category term="pandas" scheme="http://frankchen.xyz/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>python 发送带各种附件的邮件示例</title>
    <link href="http://frankchen.xyz/2018/12/20/attachments/"/>
    <id>http://frankchen.xyz/2018/12/20/attachments/</id>
    <published>2018-12-20T12:47:39.000Z</published>
    <updated>2018-12-20T13:04:56.554Z</updated>
    
    <content type="html"><![CDATA[<p>简述下如何使用python发送各种附件的邮件，比如word、excel、pdf、txt，以及在正文插入图片等等<br><a id="more"></a><br>如下所示，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> smtplib</div><div class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</div><div class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</div><div class="line"><span class="keyword">from</span> smtplib <span class="keyword">import</span> SMTP_SSL</div><div class="line"></div><div class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</div><div class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</div><div class="line"><span class="keyword">from</span> email.mime.application <span class="keyword">import</span> MIMEApplication</div><div class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</div><div class="line"><span class="keyword">from</span> email.mime.base <span class="keyword">import</span> MIMEBase</div><div class="line"><span class="keyword">from</span> email.encoders <span class="keyword">import</span> encode_base64</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> traceback</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">(mail_title,</span></span></div><div class="line">              mail_content=None,</div><div class="line">              attachment_img=None,</div><div class="line">              attachment_txt=None,</div><div class="line">              attachment_pdf=None,</div><div class="line">              attachment_excel=None,</div><div class="line">              attachment_word=None):</div><div class="line">    <span class="comment"># qq邮箱smtp服务器</span></div><div class="line">    host_server = <span class="string">'smtp.qq.com'</span></div><div class="line">    <span class="comment"># sender_qq为发件人的qq号码</span></div><div class="line">    sender_qq = <span class="string">'947118251'</span></div><div class="line">    <span class="comment"># pwd为qq邮箱的授权码</span></div><div class="line">    pwd = <span class="string">'tvjl******zpbebb'</span></div><div class="line">    <span class="comment"># 发件人的邮箱</span></div><div class="line">    sender_qq_mail = <span class="string">'947118251@qq.com'</span></div><div class="line">    <span class="comment"># 收件人邮箱</span></div><div class="line">    <span class="comment"># receiver = 'znwindy@gmail.com'</span></div><div class="line">    receiver = <span class="string">'947118251@qq.com'</span></div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="comment"># ssl登录</span></div><div class="line">        smtp = SMTP_SSL(host_server)</div><div class="line">        <span class="comment"># set_debuglevel()是用来调试的。参数值为1表示开启调试模式，参数值为0关闭调试模式</span></div><div class="line">        smtp.set_debuglevel(<span class="number">1</span>)</div><div class="line">        smtp.ehlo(host_server)</div><div class="line">        smtp.login(sender_qq, pwd)</div><div class="line"></div><div class="line">        <span class="comment"># msg = MIMEText(mail_content, "plain", 'utf-8')</span></div><div class="line">        msg = MIMEMultipart(<span class="string">'related'</span>)</div><div class="line">        msg[<span class="string">"Subject"</span>] = Header(mail_title, <span class="string">'utf-8'</span>)</div><div class="line">        msg[<span class="string">"From"</span>] = sender_qq_mail</div><div class="line">        msg[<span class="string">"To"</span>] = receiver</div><div class="line"></div><div class="line">        msgAlternative = MIMEMultipart(<span class="string">'alternative'</span>)</div><div class="line">        msg.attach(msgAlternative)</div><div class="line"></div><div class="line">        <span class="comment"># image attach</span></div><div class="line">        <span class="keyword">if</span> attachment_img:</div><div class="line">            mail_body = <span class="string">'&lt;b&gt;%s&lt;/b&gt;&lt;br&gt;&lt;img src="cid:%s"&gt;&lt;br&gt;'</span> % (mail_content, attachment_img)</div><div class="line">            msgText = (MIMEText(mail_body, <span class="string">'html'</span>, <span class="string">'utf-8'</span>))</div><div class="line">            msgAlternative.attach(msgText)</div><div class="line">            <span class="keyword">with</span> open(attachment_img, <span class="string">'rb'</span>) <span class="keyword">as</span> fp:</div><div class="line">                msgImage = MIMEImage(fp.read())</div><div class="line">            msgImage.add_header(<span class="string">'Content-ID'</span>, <span class="string">'&lt;&#123;&#125;&gt;'</span>.format(attachment_img))</div><div class="line">            msg.attach(msgImage)</div><div class="line"></div><div class="line">        <span class="comment"># txt attach</span></div><div class="line">        <span class="keyword">if</span> attachment_txt:</div><div class="line">            file_name = os.path.split(attachment_txt)[<span class="number">1</span>]</div><div class="line">            att1 = MIMEText(open(attachment_txt, <span class="string">'rb'</span>).read(), <span class="string">'base64'</span>, <span class="string">'utf-8'</span>)</div><div class="line">            att1[<span class="string">"Content-Type"</span>] = <span class="string">'application/octet-stream'</span></div><div class="line">            <span class="comment"># 这里的filename可以任意写，写什么名字，邮件中显示什么名字</span></div><div class="line">            att1[<span class="string">"Content-Disposition"</span>] = f<span class="string">'attachment; filename="&#123;file_name&#125;"'</span></div><div class="line">            msg.attach(att1)</div><div class="line"></div><div class="line">        <span class="comment"># pdf attach</span></div><div class="line">        <span class="keyword">if</span> attachment_pdf:</div><div class="line">            <span class="keyword">with</span> open(attachment_pdf, <span class="string">"rb"</span>) <span class="keyword">as</span> fp:</div><div class="line">                fileMsg = MIMEBase(<span class="string">'application'</span>, <span class="string">'pdf'</span>)</div><div class="line">                fileMsg.set_payload(fp.read())</div><div class="line">                encode_base64(fileMsg)</div><div class="line">                fileMsg.add_header(<span class="string">'Content-Disposition'</span>, f<span class="string">'attachment;filename=&#123;os.path.split(attachment_pdf)[1]&#125;'</span>)</div><div class="line">                msg.attach(fileMsg)</div><div class="line"></div><div class="line">        <span class="comment"># excel attach</span></div><div class="line">        <span class="keyword">if</span> attachment_excel:</div><div class="line">            part = MIMEBase(<span class="string">'application'</span>, <span class="string">"vnd.ms-excel"</span>)</div><div class="line">            <span class="keyword">with</span> open(attachment_excel, <span class="string">"rb"</span>) <span class="keyword">as</span> fp:</div><div class="line">                part.set_payload(fp.read())</div><div class="line">                encode_base64(part)</div><div class="line">                part.add_header(<span class="string">'Content-Disposition'</span>, f<span class="string">'attachment; filename="&#123;os.path.split(attachment_excel)[1]&#125;"'</span>)</div><div class="line">                msg.attach(part)</div><div class="line"></div><div class="line">        <span class="comment"># word attach</span></div><div class="line">        <span class="keyword">if</span> attachment_word:</div><div class="line">            <span class="keyword">with</span> open(attachment_word, <span class="string">"rb"</span>) <span class="keyword">as</span> fp:</div><div class="line">                part = MIMEApplication(fp.read())</div><div class="line">                part.add_header(<span class="string">'Content-Disposition'</span>, f<span class="string">'attachment; filename="&#123;os.path.split(attachment_word)[1]&#125;"'</span>)</div><div class="line">                part.set_charset(<span class="string">'utf-8'</span>)</div><div class="line">                msg.attach(part)</div><div class="line"></div><div class="line">        smtp.sendmail(sender_qq_mail, receiver, msg.as_string())</div><div class="line">        smtp.quit()</div><div class="line">        print(<span class="string">'Success!'</span>)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        print(<span class="string">'Error!'</span>)</div><div class="line">        traceback.print_exc()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    send_mail(mail_title=<span class="string">'爬虫结束了，正常退出!'</span>,</div><div class="line">              mail_content=<span class="string">'你好，这是使用python登录qq邮箱发邮件的测试'</span>,</div><div class="line">              attachment_img=<span class="string">'../data/test.jpg'</span>,</div><div class="line">              attachment_txt=<span class="string">'../data/start_urls.txt'</span>,</div><div class="line">              attachment_pdf=<span class="string">'../data/Gmail - How to add images in the product description_.pdf'</span>,</div><div class="line">              attachment_excel=<span class="string">'../data/shops.xlsx'</span>,</div><div class="line">              attachment_word=<span class="string">'../data/asdasd.docx'</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简述下如何使用python发送各种附件的邮件，比如word、excel、pdf、txt，以及在正文插入图片等等&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://frankchen.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5 编写并在Windows上用Cx_Freeze打包GUI程序</title>
    <link href="http://frankchen.xyz/2018/09/11/Pyqt5-GUI-package-on-Windows/"/>
    <id>http://frankchen.xyz/2018/09/11/Pyqt5-GUI-package-on-Windows/</id>
    <published>2018-09-11T14:51:05.000Z</published>
    <updated>2018-09-11T15:08:59.888Z</updated>
    
    <content type="html"><![CDATA[<p>简述下如何在Windows上用Cx_Freeze正确打包GUI程序<br><a id="more"></a></p><p>为了防止出现&gt; This application failed to start because it could not find or load the Qt platform plugin “windows” 错误，如<a href="https://pythonexample.com/code/cx_freeze-pyqt5" target="_blank" rel="external">Cx_Freeze Pyqt5 - pythonexample.com</a>这里简述的，我们需要PyQt5的库位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> cx_Freeze <span class="keyword">import</span> setup, Executable</div><div class="line"></div><div class="line">path_platforms = ( <span class="string">"C:\\Users\\zhaon\\Anaconda3\\pkgs\\qt-5.9.5-vc14he4a7d60_0\\Library\\plugins\\platforms\\qwindows.dll"</span>, <span class="string">"platforms\qwindows.dll"</span> )</div><div class="line">includefiles = [path_platforms]</div><div class="line"><span class="comment"># Dependencies are automatically detected, but it might need fine tuning.</span></div><div class="line">build_exe_options = &#123;<span class="string">"packages"</span>: [<span class="string">"os"</span>],</div><div class="line">                     <span class="string">"excludes"</span>: [<span class="string">"tkinter"</span>],</div><div class="line">                     <span class="string">"include_files"</span>: includefiles,&#125;</div><div class="line"></div><div class="line"><span class="comment"># GUI applications require a different base on Windows (the default is for a</span></div><div class="line"><span class="comment"># console application).</span></div><div class="line">base = <span class="keyword">None</span></div><div class="line"><span class="keyword">if</span> sys.platform == <span class="string">"win64"</span>:</div><div class="line">    base = <span class="string">"Win64GUI"</span></div><div class="line"></div><div class="line">setup(name=<span class="string">"QuickJump"</span>,</div><div class="line">      version=<span class="string">"0.9"</span>,</div><div class="line">      description=<span class="string">"application!"</span>,</div><div class="line">      options=&#123;<span class="string">"build_exe"</span>: build_exe_options&#125;,</div><div class="line">      executables=[Executable(<span class="string">"app.py"</span>, base=base)])</div></pre></td></tr></table></figure><p>再<code>python setup.py bdist_msi</code>即可打包msi安装包。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简述下如何在Windows上用Cx_Freeze正确打包GUI程序&lt;br&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://frankchen.xyz/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>向特朗普同志学习</title>
    <link href="http://frankchen.xyz/2018/08/22/learning-from-donald-trump/"/>
    <id>http://frankchen.xyz/2018/08/22/learning-from-donald-trump/</id>
    <published>2018-08-22T07:13:41.000Z</published>
    <updated>2018-08-22T11:55:46.284Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/15349380614206.jpg" alt=""></p><p>为什么我们要向特朗普同志学习呢？当然是因为特朗普是一个值得我们学习的人，特朗普是一个牛逼的人，是以商人身份崛起在短短20年时间里积累了数十亿美元的财富，曾被美国人奉为完美的化身，如今特朗普又于2017年以71岁高龄取得这个世界上最重要的政治职位：President of the United States。特朗普精明强硬又灵活过人，在阅读特朗普的著作时我对他更加产生好感和兴趣，于是决定先沿着特朗普的生平、著作等逐渐完成本篇，也就是这段时间我认为是自己近期最重要的研究。<br><a id="more"></a></p><h2 id="特朗普著作"><a href="#特朗普著作" class="headerlink" title="特朗普著作"></a>特朗普著作</h2><p>做生意的艺术（Trump: The Art of the Deal）正在看<br>永不放弃：特朗普自述（Never Give Up: How I Turned My Biggest Challenges into Success）看完</p><h2 id="特朗普综艺（飞黄腾达）"><a href="#特朗普综艺（飞黄腾达）" class="headerlink" title="特朗普综艺（飞黄腾达）"></a>特朗普综艺（飞黄腾达）</h2><p>未完待续</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../images/15349380614206.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;为什么我们要向特朗普同志学习呢？当然是因为特朗普是一个值得我们学习的人，特朗普是一个牛逼的人，是以商人身份崛起在短短20年时间里积累了数十亿美元的财富，曾被美国人奉为完美的化身，如今特朗普又于2017年以71岁高龄取得这个世界上最重要的政治职位：President of the United States。特朗普精明强硬又灵活过人，在阅读特朗普的著作时我对他更加产生好感和兴趣，于是决定先沿着特朗普的生平、著作等逐渐完成本篇，也就是这段时间我认为是自己近期最重要的研究。&lt;br&gt;
    
    </summary>
    
    
      <category term="chicken-soup" scheme="http://frankchen.xyz/tags/chicken-soup/"/>
    
  </entry>
  
  <entry>
    <title>Numpy中的mask</title>
    <link href="http://frankchen.xyz/2018/07/20/numpy-mask/"/>
    <id>http://frankchen.xyz/2018/07/20/numpy-mask/</id>
    <published>2018-07-20T08:48:48.000Z</published>
    <updated>2018-07-20T09:03:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>numpy中矩阵选取子集或者以条件替换，用mask是一种很好的方法<br><a id="more"></a><br>简单来说就是用bool类型的indice矩阵去选择，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mask = np.ones(X.shape[<span class="number">0</span>], dtype=bool)</div><div class="line">X[mask].shape</div><div class="line">mask.shape</div><div class="line">mask[indices[<span class="number">0</span>]] = <span class="keyword">False</span></div><div class="line">mask.shape</div><div class="line">X[mask].shape</div><div class="line">X[~mask].shape</div><div class="line">(<span class="number">678</span>, <span class="number">2</span>)</div><div class="line">(<span class="number">678</span>,)</div><div class="line">(<span class="number">678</span>,)</div><div class="line">(<span class="number">675</span>, <span class="number">2</span>)</div><div class="line">(<span class="number">3</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure></p><p>例如我们这里用来选取全部点中KNN选取的点以及所有剩余的点<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> NearestNeighbors</div><div class="line">nbrs = NearestNeighbors(<span class="number">10</span>).fit(X)</div><div class="line">_,indices = nbrs.kneighbors(X)</div><div class="line">mask = np.ones(X.shape[<span class="number">0</span>], dtype=bool)</div><div class="line">mask[indices[<span class="number">0</span>]] = <span class="keyword">False</span></div><div class="line">plt.scatter(X[mask][:,<span class="number">0</span>],X[mask][:,<span class="number">1</span>],c=<span class="string">'g'</span>)</div><div class="line">plt.scatter(X[~mask][:,<span class="number">0</span>],X[~mask][:,<span class="number">1</span>],c=<span class="string">'r'</span>)</div></pre></td></tr></table></figure></p><p><img src="/images/15320771581233.jpg" alt=""></p><p>带条件选择替换，比如我们需要将a矩阵内某条件的行置换为888剩余置换为999，可以直接用mask或者再用where一步搞定：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mask = np.ones(a.shape,dtype=bool) <span class="comment">#np.ones_like(a,dtype=bool)</span></div><div class="line">mask[indices] = <span class="keyword">False</span></div><div class="line">a[~mask] = <span class="number">999</span></div><div class="line">a[mask] = <span class="number">888</span></div><div class="line"><span class="comment">#############</span></div><div class="line">np.where(mask, <span class="number">888</span>, <span class="number">999</span>)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;numpy中矩阵选取子集或者以条件替换，用mask是一种很好的方法&lt;br&gt;
    
    </summary>
    
    
      <category term="Numpy" scheme="http://frankchen.xyz/tags/Numpy/"/>
    
  </entry>
  
  <entry>
    <title>为什么我每天早上5:30起床</title>
    <link href="http://frankchen.xyz/2018/07/19/Why-I-Wake-Up-at-5-30-am-Every-Morning-And-What-You-Will-Gain-From-Doing-It-Too/"/>
    <id>http://frankchen.xyz/2018/07/19/Why-I-Wake-Up-at-5-30-am-Every-Morning-And-What-You-Will-Gain-From-Doing-It-Too/</id>
    <published>2018-07-19T00:52:23.000Z</published>
    <updated>2018-07-19T01:31:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>几个月前，我做出一个对我来说完全不合时宜，几个月内会产生日常影响的决定。</p><p>决定就是在每天早上5:30醒来。</p><p><img src="/images/15319616493254.gif" alt=""><br><a id="more"></a></p><p>“为什么？”</p><p>这是一个合理的问题。 （我必须承认，有些早晨，我问自己同样的问题。）</p><p>你有没有醒过来觉得你完全没有了？你睁开眼睛，你就会因怨恨而战胜。你会立即想象你无情的待办事项清单，你背后的一切，以及所有必须达到的最后期限。</p><p>结果：每天早上醒来，希望你可以在床上度过余下的一天。</p><p>我不了解你，但在我的余生中每天都开始这样做？不，谢谢。</p><p>然后我发现了Hal Elrod的奇迹早晨，以及<a href="http://uk.businessinsider.com/successful-tech-people-who-wake-up-reall-early-2015-8?r=US&amp;IR=T" target="_blank" rel="external">一些最成功的企业家的早晨例程</a>。</p><p>如果成千上万的The Miracle Morning粉丝，以及像Richard Branson（Virgin的创始人兼首席执行官），Tim Cook（Apple首席执行官），Howard Schulz（星巴克首席执行官）和Jack Dorsey（Twitter创始人兼首席执行官）等人和广场）努力做到这一点，必须有一些东西，对吧？</p><p>这不是为了在太阳之前在5:30起床（我喜欢我的床和下一个人一样）。这是关于有时间完成活动，这些活动已知会对我们的心理状态，效率和（顺便提一下）我们的幸福水平产生相当积极的影响。</p><p>如果以热情的热情开始新的一天，并且想要充分利用它的想法吸引你，这就是我采用的惯例，很大程度上受到了哈尔·埃尔罗德在“奇迹早晨”中提出的建议的启发。<br>（重要提示：早上5点半醒来并不是强制性的。为了有时间进行这些活动，只需要比平常早起来就足够了。</p><h2 id="清醒你的思想和专心"><a href="#清醒你的思想和专心" class="headerlink" title="清醒你的思想和专心"></a>清醒你的思想和专心</h2><p>我们即将谈论冥想。关于冥想益处的科学证据正在增长。</p><p>冥想不一定是盘腿坐在地板上整整一个小时。经常练习五分钟的冥想会给你同样的好处。</p><p>我测试了两个可以在一开始就指导您的应用程序：</p><ul><li>Headspace（无可挑剔的用户体验设计！）</li><li>Calm（我目前使用的是什么）</li></ul><p>在The Miracle Morning中，Hal Elrod给出了一个简单的技巧：</p><ul><li>找一个舒适的地方，坐直。</li><li>闭上眼睛或盯着你面前的固定点。</li><li>专注于你的呼吸;从你的腹部吸气，通过胸部呼气。</li><li>欣赏平静;尽量专注于你的呼吸，不要想其他任何事情。当你的思绪徘徊到流浪的思绪时，不要惊慌失措，平静地将你的焦点吸回你的呼吸。<br>优点：</li></ul><p>你感到压力减轻，你获得了安心。经过一些练习，一旦你在那10分钟后重新睁开眼睛，你会真正感觉到你处于不同的心态。</p><h2 id="写"><a href="#写" class="headerlink" title="写"></a>写</h2><p>每天早上花点时间写几分钟，真的可以帮到你。它允许您评估您的当前状态，并重新关注重要的事情。</p><p>你可以，例如：</p><ul><li>写下你感恩的三件事：亲密的朋友和家人，一些好消息，美好的回忆或成就。</li><li>写下你当时的想法。</li><li>写下你想在白天完成的一切。</li><li>写下一条激励你或你想要记住的引语。</li><li>记下你最近学到的一件事或者你有一个顿悟。</li><li>一开始我曾经写过一个空白的Moleskine笔记本。然后我使用了一种特殊的日记（不是那些14岁小孩用的小心脏的日记）。今天，我正在制作自己的期刊。它将有一个特殊的布局，我可以回答预定义的每日问题。</li></ul><p>优点：</p><p>你会感到更快乐，更专注。做这个练习也可以帮助你记录你的进步，以及你生活中所有积极的事情。</p><h2 id="提醒自己你的目标"><a href="#提醒自己你的目标" class="headerlink" title="提醒自己你的目标"></a>提醒自己你的目标</h2><p>有几种方法可以做到这一点。您可以选择其中之一或三者的组合。</p><ul><li>誓词。这些是可重复的短语，描述了您想成为的人。</li><li>可视化。想象一下自己正在完成你想要完成的事情，享受美好的一天。想象并想象您将体验到的感受。</li><li>提醒目标。这是抽出我们之前讨论过的每周工作表的时刻。您还可以花点时间写下您的目标并提醒您自己想要完成它们的原因。例如：“与家人共度美好的一天 - 因为他们是我的首要任务。”<br>我第一次听到肯定和可视化时的初步反应：<br>（起初我有一点肯定和可视化方面有点麻烦。当你最初开始尝试它们时，你会感觉到你已经落在其中一个美国大会的中间，在那里演讲者告诉你你是多么美妙，以及如何改变世界…但最终，我已经习惯了他们。）</li></ul><h2 id="动起来-！"><a href="#动起来-！" class="headerlink" title="动起来 ！"></a>动起来 ！</h2><p>这是我日常动机的镜头！它让我想起了我想做什么，为什么要这样做，以及我将如何去做。</p><p>成功人士经常锻炼是有原因的。这是因为他们意识到他们需要在游戏中处于领先地位，以实现他们的目标，并且每天都充分发挥作用。</p><p>蒂姆库克每天凌晨5点去健身房，或者杰克多尔西跑10公里开始他的休息日并不奇怪。</p><p>如果您想在没有购买任何设备的情况下开始，无需加入健身房，也没有承诺，您可以举例：</p><p>去跑步，即使你开始10-15分钟<br>做一个着名的七分钟训练（例如这个 -  <a href="https://itunes.apple.com/en/app/7-minute-workout/id650762525?mt=8）" target="_blank" rel="external">https://itunes.apple.com/en/app/7-minute-workout/id650762525?mt=8）</a></p><p>每天早上做一点是理想的。但我发现最有用的是每隔一个早晨锻炼一个半小时。当我不锻炼时，我休息。最后，当我不去健身房时，我希望能够做10分钟的瑜伽。</p><p>优点：</p><p>早上进行某种形式的身体活动，即使只进行10分钟的运动，也可以让你完全醒来，放松压力，充满活力。哦是的，它也很健康。非常好，对吧</p><h2 id="读"><a href="#读" class="headerlink" title="读"></a>读</h2><p>您可以随意使用无限的知识来源：书籍。无论你想要完成什么：跑马拉松，致富，环游世界……有关于这个主题的书籍可以提供相当大的帮助。</p><p>每天早上阅读20分钟（甚至10分钟）意味着吸收知识，你可以立即付诸实践，更接近实现目标。</p><p>我经常写一些对我来说最有用的书籍摘要。</p><p>一些对我产生真正影响的书籍的例子：</p><ul><li>Tim Ferris的The 4-Hour Workweek（阅读它以大大提高您的工作效率）</li><li>Dale Carnegie 的How to Win Friends and Influence People （无疑是关于人际交往和情商的最佳现存书籍）</li><li>Chris Guillebeau的The100 Startup（向您展示如何在追求激情的同时获得良好的生活）</li><li>The Power of Less：将自己限制在商业和生活中必不可少的美术Leo Babauta（教你消除不必要的更多）</li></ul><p><strong>😎站长推荐：外文原版电子书推荐下载网站<a href="http://gen.lib.rus.ec/" target="_blank" rel="external">Library Genesis</a></strong><br><img src="/images/15319638830117.jpg" alt=""></p><p>优点：</p><p>为什么不从成功人士的经验中学习呢？你会节省很多时间。你会丰富自己。通过分享您学到的所有知识，您将能够帮助身边的人。</p><p>我已经练习了几个月的这种仪式，这里有一些好处：</p><ul><li>我从未读过那么多，因此学到了很多东西！ （我也在早晨的仪式之外阅读）</li><li>我（最终）成功地致力于定期锻炼（这个奇迹一下）</li><li>我知道我想去哪里，为什么（即使“如何”仍然含糊不清）<br>顺便说一句，我在早上6:10写了这篇文章。我刚刚完成了早上的仪式，我已经开始完成当天的第一项任务了：写这篇文章！</li></ul><p>我只能鼓励你给自己每天开始的机会，而不是迟到和压力，但要照顾好自己，充满动力，并决心充分利用每一分钟。</p><h2 id="你的待办事项列表，如果你愿意的话"><a href="#你的待办事项列表，如果你愿意的话" class="headerlink" title="你的待办事项列表，如果你愿意的话"></a>你的待办事项列表，如果你愿意的话</h2><ul><li>对于你们中间的核心：明天早上比平常提前一小时设置你的闹钟，并且每次这些活动都要做10分钟。</li><li>对于那些喜欢慢慢做的人：选择两三个对你有吸引力的任务，并明天早上开始做。</li><li>他们说，为了在你的生活中建立一个新的习惯，你必须通过“21天大关。”如果你想冒险，你知道你必须做什么。</li></ul><h2 id="译者的话"><a href="#译者的话" class="headerlink" title="译者的话"></a>译者的话</h2><p>我尝试了许多传说中对于早期有帮助的APP，许多的理念基于强制性的让你做一些动作（比如强迫扫码你的牙膏）来消除你的睡意，不过我认为这种理念本来就是不对的，惹急了用户要睡删了APP不就行了？！😂<br>现在我用的感觉很成功的一款APP叫做<a href="https://www.sleepcycle.com/" target="_blank" rel="external">Sleep Cycle alarm clock</a>，基于在你浅睡眠的时候叫醒的这个理念，保证闹铃响起的时候起床概率超高！<br>比如下图，我定了5：30的闹钟，那么APP会探测我在5：00~5：30之间的一个浅睡眠时刻叫醒我。<br><img src="/images/15319625280582.jpg" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.huffingtonpost.com/entry/why-i-wake-up-at-530-am-e_b_8055880" target="_blank" rel="external">Why I Wake Up at 5:30 am Every Morning (And What You Will Gain From Doing It Too) | HuffPost</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几个月前，我做出一个对我来说完全不合时宜，几个月内会产生日常影响的决定。&lt;/p&gt;
&lt;p&gt;决定就是在每天早上5:30醒来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/15319616493254.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="chicken-soup" scheme="http://frankchen.xyz/tags/chicken-soup/"/>
    
  </entry>
  
  <entry>
    <title>Datacamp Git 笔记</title>
    <link href="http://frankchen.xyz/2018/07/13/Datacamp-Git-Nones/"/>
    <id>http://frankchen.xyz/2018/07/13/Datacamp-Git-Nones/</id>
    <published>2018-07-13T09:14:07.000Z</published>
    <updated>2018-07-19T03:35:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近入了<a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.11752e8diqYgI7&amp;id=565426495436&amp;_u=dn2i5bf6736" target="_blank" rel="external">elecomI Pad贴膜</a>后用iPad写字感觉超棒！🐱<br>这里是一段DataCamp上的Git课程的笔记，当然这是免费课程，其实我领取<a href="http://www.10tiao.com/html/407/201801/2650545581/1.html" target="_blank" rel="external">微软送的的两月DataCamp会员</a>过期了。。。😡<br><a id="more"></a><br>这就是[elecomI 的Pad贴膜]<br><img src="/images/15319713559370.jpg" alt=""></p><p><img src="/images/IMG_0150.png" alt="IMG_0150"><br><img src="/images/IMG_0151.png" alt="IMG_0151"></p><p>后续有更新再补充~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近入了&lt;a href=&quot;https://item.taobao.com/item.htm?spm=a1z09.2.0.0.11752e8diqYgI7&amp;amp;id=565426495436&amp;amp;_u=dn2i5bf6736&quot;&gt;elecomI Pad贴膜&lt;/a&gt;后用iPad写字感觉超棒！🐱&lt;br&gt;这里是一段DataCamp上的Git课程的笔记，当然这是免费课程，其实我领取&lt;a href=&quot;http://www.10tiao.com/html/407/201801/2650545581/1.html&quot;&gt;微软送的的两月DataCamp会员&lt;/a&gt;过期了。。。😡&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://frankchen.xyz/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>在Linux上重新映射Win，Ctrl和Alt键</title>
    <link href="http://frankchen.xyz/2018/07/12/remap-win-ctrl-and-alt-keys-on-linux/"/>
    <id>http://frankchen.xyz/2018/07/12/remap-win-ctrl-and-alt-keys-on-linux/</id>
    <published>2018-07-12T08:43:42.000Z</published>
    <updated>2018-07-12T08:54:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>用惯了Mac上的CMD + * 等操作，就习惯了左手大拇指这个组合键操作了，切换到Linux上必须要Ctrl各种小指不舒服。。。值得一提的是Mac上左侧按键顺序是control、alt/option、command，Ubuntu则是control、super、alt，Windows则是control、Win、alt。这里我们方便Mac用户起见，就把Ubuntu的control、super、alt映射为super、alt、control</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">vim ~/.Xmodmap</div><div class="line"></div><div class="line">clear control</div><div class="line">clear mod1</div><div class="line">clear mod4</div><div class="line"></div><div class="line"></div><div class="line">keycode 37  = Super_L     </div><div class="line">! left  Ctrl becomes Super</div><div class="line">keycode 64  = Control_L</div><div class="line">! left  Alt  becomes Control </div><div class="line">keycode 133 = Alt_L Meta_L</div><div class="line">! left  W<span class="keyword">in</span>  becomes Alt</div><div class="line">keycode 108 = Control_R</div><div class="line">! right Alt  becomes Control </div><div class="line">keycode 134 = Alt_R Meta_R</div><div class="line">! right W<span class="keyword">in</span>  becomes Alt</div><div class="line">keycode 105 = Super_R</div><div class="line">! right Ctrl becomes Super</div><div class="line"></div><div class="line"></div><div class="line">add control = Control_L Control_R</div><div class="line">add mod1 = Alt_L Meta_L</div><div class="line">add mod4 = Super_L Super_R</div></pre></td></tr></table></figure><p>再<code>xmodmap ~/.Xmodmap</code>即可！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用惯了Mac上的CMD + * 等操作，就习惯了左手大拇指这个组合键操作了，切换到Linux上必须要Ctrl各种小指不舒服。。。值得一提的是Mac上左侧按键顺序是control、alt/option、command，Ubuntu则是control、super、alt，Windows则是control、Win、alt。这里我们方便Mac用户起见，就把Ubuntu的control、super、alt映射为super、alt、control&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://frankchen.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Mac 双开 ss 方法</title>
    <link href="http://frankchen.xyz/2018/05/31/dual-ss-on-mac/"/>
    <id>http://frankchen.xyz/2018/05/31/dual-ss-on-mac/</id>
    <published>2018-05-31T11:24:17.000Z</published>
    <updated>2018-07-12T09:25:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我们需要两个代理，譬如一个用来连需要经过跳板机代理的集群服务，一个则用来科学上网，不停切换麻烦且代价比较高，那我们除了ShadowsocksX-NG客户端之外，我们可以用命令行的方式再开启一个，<br><a id="more"></a><br><img src="/images/15277663104280.jpg" alt=""></p><p><img src="/images/15277666370736.jpg" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用Homebrew安装</span></div><div class="line">brew install shadowsocks-libev</div><div class="line"><span class="comment"># 编辑配置信息</span></div><div class="line">sudo vim /usr/<span class="built_in">local</span>/etc/shadowsocks-libev.json</div><div class="line"><span class="comment"># 格式如下，注意与ShadowsocksX-NG的local_port也就是socks5不同</span></div><div class="line">&#123;</div><div class="line">    <span class="string">"server"</span>:<span class="string">"107.167.185.234"</span>,</div><div class="line">    <span class="string">"server_port"</span>:11499,</div><div class="line">    <span class="string">"local_port"</span>:1079,</div><div class="line">    <span class="string">"password"</span>:<span class="string">"xxxxxxxx"</span>,</div><div class="line">    <span class="string">"timeout"</span>:600,</div><div class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-gcm"</span></div><div class="line">&#125;</div><div class="line"><span class="comment"># 重启 shadowsocks-libev，会自动添加开机自启</span></div><div class="line">brew services restart shadowsocks-libev</div></pre></td></tr></table></figure><p>再在SwitchyOmega里面设置两个不同的代理即可，<br><img src="/images/15277663992132.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候我们需要两个代理，譬如一个用来连需要经过跳板机代理的集群服务，一个则用来科学上网，不停切换麻烦且代价比较高，那我们除了ShadowsocksX-NG客户端之外，我们可以用命令行的方式再开启一个，&lt;br&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="http://frankchen.xyz/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>从 Hive 获取数据到本地的方法 🦄</title>
    <link href="http://frankchen.xyz/2018/05/03/get-table-from-spark/"/>
    <id>http://frankchen.xyz/2018/05/03/get-table-from-spark/</id>
    <published>2018-05-03T12:51:14.000Z</published>
    <updated>2018-08-21T09:34:02.661Z</updated>
    
    <content type="html"><![CDATA[<p>我们使用pyspark 读取Hive里的表格，存储到HDFS，再get到跳板机，再rsync到本地，再用dask读取为Dataframe。<br><a id="more"></a></p><h2 id="第一版"><a href="#第一版" class="headerlink" title="第一版"></a>第一版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> *</div><div class="line"> <span class="number">2</span> <span class="keyword">import</span> pyspark</div><div class="line"> <span class="number">3</span> <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"> <span class="number">4</span>     spark = SparkSession.builder.master(<span class="string">"yarn"</span>).appName(<span class="string">"pyspark location process"</span>).enableHiveSupport().getOrCreate()</div><div class="line"> <span class="number">5</span>     sc = spark.sparkContext</div><div class="line"> <span class="number">6</span>    <span class="comment"># spark.sql('show databases').show()</span></div><div class="line"> <span class="number">7</span>     spark.sql(<span class="string">'use annals'</span>).show()</div><div class="line"> <span class="number">8</span>    <span class="comment"># spark.sql('describe gps2').show()</span></div><div class="line"> <span class="number">9</span>     spark.sql(<span class="string">'select * from gps2 limit 1'</span>).show()</div><div class="line"><span class="number">10</span>     sql_df = spark.sql(<span class="string">'select uid, lat, lgt, app_adjust_time from gps2 limit 5'</span>)</div><div class="line"><span class="number">11</span>     <span class="comment">#sql_df.show()</span></div><div class="line"><span class="number">12</span>     print(type(sql_df))</div><div class="line"><span class="number">13</span>     sql_df.write.save(<span class="string">"data/GrMWKfDj9eIjsRuh.parquet"</span>)</div></pre></td></tr></table></figure><h2 id="第二版"><a href="#第二版" class="headerlink" title="第二版"></a>第二版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># find pyspark and import</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> gc </div><div class="line">os.environ[<span class="string">'SPARK_HOME'</span>] = <span class="string">"/opt/cloudera/parcels/SPARK2/lib/spark2"</span></div><div class="line">sys.path.append(os.path.join(<span class="string">"/home/ubuntu/data/pythonpackage"</span>))</div><div class="line">sys.path.append(os.path.join(os.environ[<span class="string">'SPARK_HOME'</span>], <span class="string">"python"</span>))</div><div class="line">sys.path.append(os.path.join(os.environ[<span class="string">'SPARK_HOME'</span>], <span class="string">"python/lib/py4j-0.10.6-src.zip"</span>))</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkContext</div><div class="line">    <span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</div><div class="line"></div><div class="line">    <span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf</div><div class="line">    </div><div class="line">    print(<span class="string">"success"</span>)</div><div class="line"></div><div class="line"><span class="keyword">except</span> ImportError <span class="keyword">as</span> e:</div><div class="line">    print(<span class="string">"error importing spark modules"</span>, e)</div><div class="line">    sys.exit(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">#   SparkSession初始化</span></div><div class="line">spark = SparkSession \</div><div class="line">    .builder \</div><div class="line">    .master(<span class="string">"yarn"</span>) \</div><div class="line">    .appName(<span class="string">"gps"</span>) \</div><div class="line">    .config(<span class="string">"spark.submit.deployMode"</span>,<span class="string">"client"</span>) \</div><div class="line">    .config(<span class="string">"num-executors"</span>, <span class="number">5</span>) \</div><div class="line">    .config(<span class="string">"executor-cores"</span>, <span class="number">4</span>) \</div><div class="line">    .config(<span class="string">"executor-memory"</span>, <span class="string">"2g"</span>) \</div><div class="line">    .config(<span class="string">"driver-memory"</span>, <span class="string">"1g"</span>) \</div><div class="line">    .enableHiveSupport() \</div><div class="line">    .getOrCreate() </div><div class="line">sc = spark.sparkContext</div><div class="line"></div><div class="line"><span class="comment"># spark sql，得到dataframe</span></div><div class="line">df = spark.sql(<span class="string">"SELECT * FROM tmp.czn_userlocation_filteredby_black"</span>)</div><div class="line">df.printSchema()</div><div class="line">df.show(<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment"># 写到hdfs上，parquet格式</span></div><div class="line">df.write.parquet(<span class="string">"/user/akulaku/czn_userlocation_filteredby_black.parquet"</span>)</div></pre></td></tr></table></figure><p>这样我们就在hdfs上得到了一份parquet格式的文件。</p><h2 id="第三版"><a href="#第三版" class="headerlink" title="第三版"></a>第三版</h2><p>有时候我们可以在hive或者impala上建表，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create table tmp.czn_usersensorlog_of_may as SELECT uid, apptime, value0, value1, value2 FROM ods.usersensorlog WHERE month = <span class="string">"2018_05"</span></div></pre></td></tr></table></figure><p><code>show create table tmp.czn_usersensorlog_of_may</code><br><code>CREATE TABLE tmp.czn_usersensorlog_of_may (   uid BIGINT,   apptime BIGINT,   value0 FLOAT,   value1 FLOAT,   value2 FLOAT ) STORED AS TEXTFILE LOCATION &#39;hdfs://nameservice1/user/hive/warehouse/tmp.db/czn_usersensorlog_of_may&#39;</code></p><h2 id="第四版"><a href="#第四版" class="headerlink" title="第四版"></a>第四版</h2><p>有时候我们需要指定表的格式为parquet，这样有利于用pandas或者dask读取，那么可以如下设置，这里我们先建表再插入数据，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">drop table <span class="keyword">if</span> exists tmp.czn_userlocation_tmp_test;</div><div class="line">CREATE TABLE tmp.czn_userlocation_tmp_test </div><div class="line">(   </div><div class="line">uid BIGINT,</div><div class="line">lat <span class="built_in">float</span>,</div><div class="line">lgt <span class="built_in">float</span>,</div><div class="line">apptime BIGINT,</div><div class="line">)</div><div class="line">STORED AS PARQUET</div><div class="line">TBLPROPERTIES (<span class="string">'parquet.compression'</span>=<span class="string">'SNAPPY'</span>);</div><div class="line"></div><div class="line">insert OVERWRITE TABLE tmp. czn_userlocation_tmp_test</div><div class="line">SELECT  uid, lat, lgt,  apptime </div><div class="line">from kafka_table.userlocation2 </div><div class="line">WHERE apptime between 1532156404000 and 1532156764000;</div></pre></td></tr></table></figure><p>得到了hdfs路径，这里我们可以直接用hdfs命令get</p><p>此时数据只是在hdfs上，我们要下载还需要将数据从hdfs 复制到跳板机，</p><p><code>hadoop fs -get /user/akulaku/czn_userlocation_filteredby_black.parquet chenzn/</code></p><p>再scp 之类的 复制到本地即可，不过相比scp，rsync更适合传输parquet，例如，可以压缩，断点续传等等，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rsync -P -z -r <span class="_">-e</span> ssh akulaku@cdh-master4:~/chenzn/czn_userlocation_filteredby_black.parquet ~</div></pre></td></tr></table></figure><p>parquet格式文件的读取可以使用dask，并选择‘pyarrow’引擎，可以顺利读取超过内存的数据，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> dask.dataframe <span class="keyword">as</span> dd</div><div class="line">df = dd.read_parquet(file_path, engine=<span class="string">'pyarrow'</span>)</div></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>rsync其中参数如下，参考自<a href="https://kyup.com/tutorials/copy-files-rsync-ssh/" target="_blank" rel="external">How to copy files with rsync over SSH - Tutorials For Kyup.com</a>：</p><ul><li>–delete - delete files that don’t exist on sender (system)</li><li>-v - verbose (-vv will provide more detailed information)</li><li>-e “ssh options” - specify the ssh as remote shell</li><li>-a - archive mode - it preserves permissions (owners, groups), times, symbolic links, and devices</li><li>-r - recurse into directories</li><li>-z - compress file data during transfer</li><li>–exclude ‘foldername’ – excludes the corresponding folder from transfer</li><li>-P – show progress during transfer</li></ul><p>🐶🐒</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们使用pyspark 读取Hive里的表格，存储到HDFS，再get到跳板机，再rsync到本地，再用dask读取为Dataframe。&lt;br&gt;
    
    </summary>
    
    
      <category term="spark" scheme="http://frankchen.xyz/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Mac 通过 socks5 代理 连接 ssh 的方法🏆</title>
    <link href="http://frankchen.xyz/2018/05/03/mac-ssh-through-socks5-proxy/"/>
    <id>http://frankchen.xyz/2018/05/03/mac-ssh-through-socks5-proxy/</id>
    <published>2018-05-03T09:08:10.000Z</published>
    <updated>2018-05-03T09:15:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>经过一番痛苦的折腾，我才发现<strong>socks,http代理等使用的是TCP或UDP协议, 而ping命令则是ICMP协议, 所以proxychains4对ping命令无效.</strong>，最终又折腾过tsocks等和proxychains一样德行的以后，最终在万能的Stack Overflow找到<a href="https://serverfault.com/questions/315605/ssh-through-a-socks-proxy-client-openssh-os-x" target="_blank" rel="external">答案</a>：即通过NetCat (nc)连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vim ~/.ssh/config</div><div class="line"><span class="comment"># 添加以下内容</span></div><div class="line">Host 52.* <span class="comment"># 这里可以通配也可以指定IP</span></div><div class="line">    ProxyCommand nc -X 5 -x 127.0.0.1:1079 %h %p</div><div class="line">    <span class="comment"># "5" 是 SOCKS 5, "1079" 是本地socks端口</span></div></pre></td></tr></table></figure><p>之后直接使用<code>ssh</code>命令连接即可😎😂</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经过一番痛苦的折腾，我才发现&lt;strong&gt;socks,http代理等使用的是TCP或UDP协议, 而ping命令则是ICMP协议, 所以proxychains4对ping命令无效.&lt;/strong&gt;，最终又折腾过tsocks等和proxychains一样德行的以后，最终在
      
    
    </summary>
    
    
      <category term="Mac" scheme="http://frankchen.xyz/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>moving averge 滑动平均</title>
    <link href="http://frankchen.xyz/2018/04/25/moving-averge/"/>
    <id>http://frankchen.xyz/2018/04/25/moving-averge/</id>
    <published>2018-04-25T14:58:46.000Z</published>
    <updated>2018-04-26T03:49:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>moving averge 即滑动平均，时间序列处理中常见的方法，简单来说，就是对于一个给定数列，设定一个窗口值N，依次取第1项~第N项，第2项~第N+1项，第3项~第N+2项的平均值，以此类推。</p><a id="more"></a><p>数据来自<a href="http://blog.topspeedsnail.com/wp-content/uploads/2016/12/%E9%93%81%E8%B7%AF%E5%AE%A2%E8%BF%90%E9%87%8F.csv" target="_blank" rel="external">铁路客运量.csv（2005-2016月度数据）</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> io</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pylab</div><div class="line">pylab.style.use(<span class="string">'bmh'</span>)</div><div class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> rcParams</div><div class="line">rcParams[<span class="string">'figure.figsize'</span>] = <span class="number">10</span>, <span class="number">8</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">moving_average</span><span class="params">(l, N)</span>:</span></div><div class="line">sum = <span class="number">0</span></div><div class="line">result = list( <span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> l)</div><div class="line"> </div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range( <span class="number">0</span>, N ):</div><div class="line">       <span class="comment"># 从左到右逐渐添加index在N之内的数字</span></div><div class="line">sum = sum + l[i]</div><div class="line">result[i] = sum / (i+<span class="number">1</span>)</div><div class="line"> </div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range( N, len(l) ):</div><div class="line">       <span class="comment"># 加入最右边数字减去最左边数字</span></div><div class="line">sum = sum - l[i-N] + l[i]</div><div class="line">result[i] = sum / N</div><div class="line"> </div><div class="line"><span class="keyword">return</span> result</div><div class="line"> </div><div class="line"><span class="comment"># 使用效率更高的numpy</span></div><div class="line"><span class="comment"># http://stackoverflow.com/questions/13728392/moving-average-or-running-mean</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fast_moving_average</span><span class="params">(x, N)</span>:</span></div><div class="line"><span class="keyword">return</span> np.convolve(x, np.ones((N,))/N)[(N<span class="number">-1</span>):]</div><div class="line"> </div><div class="line">url = <span class="string">'铁路客运量.csv'</span></div><div class="line"></div><div class="line"> </div><div class="line">df = pd.read_csv(url)  <span class="comment"># python2使用StringIO.StringIO</span></div><div class="line"> </div><div class="line">data = np.array(df[<span class="string">'铁路客运量_当期值(万人)'</span>])</div><div class="line"> </div><div class="line">dic = &#123;&#125;</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>]:</div><div class="line">    ma_data = moving_average(data, i)</div><div class="line">    dic[i] = ma_data</div><div class="line">ma_data_df = pd.DataFrame(dic)</div><div class="line"></div><div class="line">ma_data_df.plot()</div></pre></td></tr></table></figure></p><p>可以看到，趋势逐渐变得平滑，即对局部震荡不敏感。</p><p><img src="/images/download.png" alt="download"></p><p>使用numpy.convolve是一种更方便的方法，值得注意的是其有三种mode，分别是’full’（单个重叠也计算）, ‘same’（强制等长）, ‘valid’（完全重叠），</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fast_moving_average</span><span class="params">(x, N, mode)</span>:</span></div><div class="line"><span class="comment"># return np.convolve(x, np.ones((N,))/N, mode='valid')[(N-1):]</span></div><div class="line"><span class="keyword">return</span> np.convolve(x, np.ones((N,))/N, mode=mode)</div><div class="line">dic = &#123;&#125;</div><div class="line">modes = [<span class="string">'full'</span>, <span class="string">'same'</span>, <span class="string">'valid'</span>]</div><div class="line">i = <span class="number">10</span></div><div class="line"><span class="keyword">for</span> mode <span class="keyword">in</span> modes:</div><div class="line">    ma_data = fast_moving_average(data, i, mode)</div><div class="line">    pylab.plot(ma_data)</div><div class="line">pylab.legend(modes)</div></pre></td></tr></table></figure><p><img src="/images/download%20-1-.png" alt="download -1-"></p><p>参考自斗大熊的博客<a href="http://blog.topspeedsnail.com/archives/11022" target="_blank" rel="external">MovingAverage-滑动平均 – WTF Daily Blog</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;moving averge 即滑动平均，时间序列处理中常见的方法，简单来说，就是对于一个给定数列，设定一个窗口值N，依次取第1项~第N项，第2项~第N+1项，第3项~第N+2项的平均值，以此类推。&lt;/p&gt;
    
    </summary>
    
    
      <category term="time series" scheme="http://frankchen.xyz/tags/time-series/"/>
    
  </entry>
  
  <entry>
    <title>keras 中模型的保存及重用</title>
    <link href="http://frankchen.xyz/2018/04/19/keras-reuse-model/"/>
    <id>http://frankchen.xyz/2018/04/19/keras-reuse-model/</id>
    <published>2018-04-19T08:50:00.000Z</published>
    <updated>2018-04-25T11:57:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/15135840798621.jpg" alt=""><br>深度学习中如何保存最佳模型，如何重用已经保存的模型？本文主要介绍Keras 保存及重用模型的方法<br><a id="more"></a></p><h2 id="保存模型"><a href="#保存模型" class="headerlink" title="保存模型"></a>保存模型</h2><p>如下，我们预定义保存的<code>hdf5</code>文件名，再初始化<code>ModelCheckpoint</code>，将其加入Keras的callback里（即每个batch结束后做的事情），那么模型就会在每次batch结束后对比，保存最好的模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> keras.callbacks <span class="keyword">import</span> ModelCheckpoint</div><div class="line"></div><div class="line"><span class="comment"># create model</span></div><div class="line">model = Sequential()</div><div class="line">model.add(...)</div><div class="line">model.add(...)</div><div class="line">model.add(...)</div><div class="line"><span class="comment"># Compile model</span></div><div class="line">model.compile(...)</div><div class="line"><span class="comment"># checkpoint</span></div><div class="line">filepath=<span class="string">"weights-&#123;epoch:02d&#125;-&#123;val_acc:.2f&#125;.hdf5"</span></div><div class="line">checkpoint = ModelCheckpoint(filepath, monitor=<span class="string">'val_acc'</span>, verbose=<span class="number">1</span>, save_best_only=<span class="keyword">True</span>, mode=<span class="string">'max'</span>)</div><div class="line"><span class="comment"># Fit the model</span></div><div class="line">model.fit(X, Y, validation_split=<span class="number">0.33</span>, epochs=<span class="number">150</span>, batch_size=<span class="number">10</span>, callbacks=[checkpoint], verbose=<span class="number">0</span>)</div></pre></td></tr></table></figure><p>结束后，我们会得到如下的结果，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">weights-53-0.76.hdf5</div><div class="line">weights-71-0.76.hdf5</div><div class="line">weights-77-0.78.hdf5</div><div class="line">weights-99-0.78.hdf5</div></pre></td></tr></table></figure><p>如果我们只想保存一个最好的模型，那么把保存文件名字固定为<code>filepath=&quot;weights.best.hdf5&quot;</code>即可。</p><h2 id="load模型"><a href="#load模型" class="headerlink" title="load模型"></a>load模型</h2><p>注意，之前保存的只是模型的weights，重新load需要再次定义模型结构再load weights并再次combine，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> keras.callbacks <span class="keyword">import</span> ModelCheckpoint</div><div class="line"><span class="comment"># create model</span></div><div class="line">model = Sequential()</div><div class="line">model.add(...)</div><div class="line">model.add(...)</div><div class="line">model.add(...)</div><div class="line"><span class="comment"># load weights</span></div><div class="line">model.load_weights(<span class="string">"weights.best.hdf5"</span>)</div><div class="line"><span class="comment"># Compile model </span></div><div class="line">model.compile(...)</div><div class="line"><span class="comment"># estimate accuracy </span></div><div class="line">scores = model.evaluate(X, Y, verbose=<span class="number">0</span>)</div><div class="line">print(<span class="string">'&#123;&#125;: &#123;:.2%&#125;'</span>.format(model.metrics_names[<span class="number">1</span>], scores[<span class="number">1</span>]))</div></pre></td></tr></table></figure><p>如果之前选择了连模型结构也一起保存（即在<code>ModelCheckpoint</code>中选择<code>save_weights_only=False</code>），那么load就很简单，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> keras.callbacks <span class="keyword">import</span> ModelCheckpoint</div><div class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model</div><div class="line"></div><div class="line"><span class="comment"># create model</span></div><div class="line">model = Sequential()</div><div class="line">model.add(...)</div><div class="line">model.add(...)</div><div class="line">model.add(...)</div><div class="line"><span class="comment"># Compile model</span></div><div class="line">model.compile(...)</div><div class="line"><span class="comment"># checkpoint</span></div><div class="line">filepath=<span class="string">"weights-best.hdf5"</span></div><div class="line">checkpoint = ModelCheckpoint(filepath, monitor=<span class="string">'val_acc'</span>, verbose=<span class="number">1</span>, save_best_only=<span class="keyword">True</span>, mode=<span class="string">'max'</span>, save_weights_only=<span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="comment"># Fit the model</span></div><div class="line">model.fit(X, Y, validation_split=<span class="number">0.33</span>, epochs=<span class="number">150</span>, batch_size=<span class="number">10</span>, callbacks=[checkpoint], verbose=<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment"># Load the model</span></div><div class="line">model= load_model(filepath)</div><div class="line">scores=model.evaluate(X, Y,verbose=<span class="number">0</span>)</div><div class="line">print(<span class="string">'&#123;&#125;: &#123;:.2%&#125;'</span>.format(model.metrics_names[<span class="number">1</span>], scores[<span class="number">1</span>]))</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/15135840798621.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;深度学习中如何保存最佳模型，如何重用已经保存的模型？本文主要介绍Keras 保存及重用模型的方法&lt;br&gt;
    
    </summary>
    
    
      <category term="Keras" scheme="http://frankchen.xyz/tags/Keras/"/>
    
  </entry>
  
  <entry>
    <title>理解一维卷积</title>
    <link href="http://frankchen.xyz/2018/04/17/conv1d-in-keras/"/>
    <id>http://frankchen.xyz/2018/04/17/conv1d-in-keras/</id>
    <published>2018-04-17T07:46:36.000Z</published>
    <updated>2018-04-19T08:50:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>理解一维卷积<br><a id="more"></a><br>下面是一个利用CNN进行NLP中的情感分类的例子，<br><img src="/images/15240224514694.png" alt=""></p><p>上图中，输入为表示为词表为d=5，长度为7的矩阵的句子，1D卷积核为长度分别为(2,3,4)的各两个，经过卷积并激活函数后，各自产生了(4x1, 5x1, 6x1)的各两个feature map，每个feature map经过一次1D max pooling后（即取每个feature map的最大值）再concatenate为一个6x1的1D向量，经过一个全连接层再softmax激活即可进行情感分类预测。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;理解一维卷积&lt;br&gt;
    
    </summary>
    
    
      <category term="Deep Learning" scheme="http://frankchen.xyz/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>处理大数据集的建议</title>
    <link href="http://frankchen.xyz/2018/04/10/handle-big-datasets/"/>
    <id>http://frankchen.xyz/2018/04/10/handle-big-datasets/</id>
    <published>2018-04-10T07:07:34.000Z</published>
    <updated>2018-04-10T08:15:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近的一些比赛如<a href="https://www.kaggle.com/c/talkingdata-adtracking-fraud-detection" target="_blank" rel="external">TalkingData AdTracking Fraud Detection Challenge | Kaggle</a>提供了很大的数据集，一般来说，只有16G的内存的“小”电脑都无法直接处理这种数据集了，本文收集了一些关于处理这种数据的建议，供大家参考。<br><a id="more"></a></p><h2 id="1-及时删除无用变量并垃圾回收"><a href="#1-及时删除无用变量并垃圾回收" class="headerlink" title="1.及时删除无用变量并垃圾回收"></a>1.及时删除无用变量并垃圾回收</h2><p>通常我们在特征工程中会涉及大量的转换操作，产生很多的中间变量等，除了使用<code>del</code>以外，使用<code>gc.collect()</code>也是个不错的选择。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">temp = pd.read_csv(<span class="string">'../input/train_sample.csv'</span>)</div><div class="line"></div><div class="line"><span class="comment">#do something to the file</span></div><div class="line">temp[<span class="string">'os'</span>] = temp[<span class="string">'os'</span>].astype(<span class="string">'str'</span>)</div><div class="line"><span class="comment">#delete when no longer needed</span></div><div class="line"><span class="keyword">del</span> temp</div><div class="line"><span class="comment">#collect residual garbage</span></div><div class="line">gc.collect()</div></pre></td></tr></table></figure><h2 id="2-预定义数据类型"><a href="#2-预定义数据类型" class="headerlink" title="2.预定义数据类型"></a>2.预定义数据类型</h2><p>pandas一般会自己推断数据类型，不过倾向于使用耗费空间大的，如下面例子所示，预定义数据类型节省了超过一半的空间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">dtypes = &#123;</div><div class="line">        <span class="string">'ip'</span>            : <span class="string">'uint32'</span>,</div><div class="line">        <span class="string">'app'</span>           : <span class="string">'uint16'</span>,</div><div class="line">        <span class="string">'device'</span>        : <span class="string">'uint16'</span>,</div><div class="line">        <span class="string">'os'</span>            : <span class="string">'uint16'</span>,</div><div class="line">        <span class="string">'channel'</span>       : <span class="string">'uint16'</span>,</div><div class="line">        <span class="string">'is_attributed'</span> : <span class="string">'uint8'</span>,</div><div class="line">        &#125;</div><div class="line"></div><div class="line">dtypes2 = &#123;</div><div class="line">        <span class="string">'ip'</span>            : <span class="string">'int32'</span>,</div><div class="line">        <span class="string">'app'</span>           : <span class="string">'int16'</span>,</div><div class="line">        <span class="string">'device'</span>        : <span class="string">'int16'</span>,</div><div class="line">        <span class="string">'os'</span>            : <span class="string">'int16'</span>,</div><div class="line">        <span class="string">'channel'</span>       : <span class="string">'int16'</span>,</div><div class="line">        <span class="string">'is_attributed'</span> : <span class="string">'int8'</span>,</div><div class="line">        &#125;</div><div class="line"></div><div class="line">train = pd.read_csv(train_sample_file,parse_dates=[<span class="string">'click_time'</span>])</div><div class="line"></div><div class="line"><span class="comment">#check datatypes:</span></div><div class="line">train.info()</div><div class="line"></div><div class="line">train = pd.read_csv(train_sample_file,dtype=dtypes,parse_dates=[<span class="string">'click_time'</span>])</div><div class="line"></div><div class="line"><span class="comment">#check datatypes:</span></div><div class="line">train.info()</div><div class="line"></div><div class="line"></div><div class="line">train = pd.read_csv(train_sample_file,dtype=dtypes2,parse_dates=[<span class="string">'click_time'</span>])</div><div class="line"></div><div class="line"><span class="comment">#check datatypes:</span></div><div class="line">train.info()</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">&lt;class 'pandas.core.frame.DataFrame'&gt;</div><div class="line">RangeIndex: 100000 entries, 0 to 99999</div><div class="line">Data columns (total 8 columns):</div><div class="line">ip                 100000 non-null int64</div><div class="line">app                100000 non-null int64</div><div class="line">device             100000 non-null int64</div><div class="line">os                 100000 non-null int64</div><div class="line">channel            100000 non-null int64</div><div class="line">click_time         100000 non-null datetime64[ns]</div><div class="line">attributed_time    227 non-null object</div><div class="line">is_attributed      100000 non-null int64</div><div class="line">dtypes: datetime64[ns](1), int64(6), object(1)</div><div class="line">memory usage: 6.1+ MB</div><div class="line">&lt;class 'pandas.core.frame.DataFrame'&gt;</div><div class="line">RangeIndex: 100000 entries, 0 to 99999</div><div class="line">Data columns (total 8 columns):</div><div class="line">ip                 100000 non-null uint32</div><div class="line">app                100000 non-null uint16</div><div class="line">device             100000 non-null uint16</div><div class="line">os                 100000 non-null uint16</div><div class="line">channel            100000 non-null uint16</div><div class="line">click_time         100000 non-null datetime64[ns]</div><div class="line">attributed_time    227 non-null object</div><div class="line">is_attributed      100000 non-null uint8</div><div class="line">dtypes: datetime64[ns](1), object(1), uint16(4), uint32(1), uint8(1)</div><div class="line">memory usage: 2.8+ MB</div><div class="line">&lt;class 'pandas.core.frame.DataFrame'&gt;</div><div class="line">RangeIndex: 100000 entries, 0 to 99999</div><div class="line">Data columns (total 8 columns):</div><div class="line">ip                 100000 non-null int32</div><div class="line">app                100000 non-null int16</div><div class="line">device             100000 non-null int16</div><div class="line">os                 100000 non-null int16</div><div class="line">channel            100000 non-null int16</div><div class="line">click_time         100000 non-null datetime64[ns]</div><div class="line">attributed_time    227 non-null object</div><div class="line">is_attributed      100000 non-null int8</div><div class="line">dtypes: datetime64[ns](1), int16(4), int32(1), int8(1), object(1)</div><div class="line">memory usage: 2.8+ MB</div><div class="line">'''</div></pre></td></tr></table></figure><h2 id="3-只使用csv文件内的指定行"><a href="#3-只使用csv文件内的指定行" class="headerlink" title="3.只使用csv文件内的指定行"></a>3.只使用csv文件内的指定行</h2><h3 id="a-指定行数"><a href="#a-指定行数" class="headerlink" title="a) 指定行数"></a>a) 指定行数</h3><p>直接使用nrows指定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">train = pd.read_csv(<span class="string">'../input/train.csv'</span>, nrows=<span class="number">1e5</span>, dtype=dtypes)</div></pre></td></tr></table></figure><h3 id="b-跳过行数"><a href="#b-跳过行数" class="headerlink" title="b) 跳过行数"></a>b) 跳过行数</h3><p>比如我们跳过前500w取100w下面保留了head，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">train = pd.read_csv(<span class="string">'../input/train.csv'</span>, skiprows=range(<span class="number">1</span>, <span class="number">5000000</span>), nrows=<span class="number">1000000</span>, dtype=dtypes)</div></pre></td></tr></table></figure><h3 id="c-sampling"><a href="#c-sampling" class="headerlink" title="c) sampling"></a>c) sampling</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> subprocess</div><div class="line">print(<span class="string">'# Line count:'</span>)</div><div class="line"><span class="keyword">for</span> file <span class="keyword">in</span> [<span class="string">'train.csv'</span>, <span class="string">'test.csv'</span>, <span class="string">'train_sample.csv'</span>]:</div><div class="line">    lines = subprocess.run([<span class="string">'wc'</span>, <span class="string">'-l'</span>, <span class="string">'../input/&#123;&#125;'</span>.format(file)], stdout=subprocess.PIPE).stdout.decode(<span class="string">'utf-8'</span>)</div><div class="line">    print(lines, end=<span class="string">''</span>, flush=<span class="keyword">True</span>)</div><div class="line"><span class="string">'''</span></div><div class="line"># Line count:</div><div class="line">184903891 ../input/train.csv</div><div class="line">18790470 ../input/test.csv</div><div class="line">100001 ../input/train_sample.csv</div><div class="line">'''</div></pre></td></tr></table></figure><p>train一共有<code>lines=184903891</code> 行，那么假设我们需要采样出100w行，那么我们需要跳过<code>lines - 1 - 1000000</code>行，即</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#generate list of lines to skip</span></div><div class="line">skiplines = np.random.choice(np.arange(<span class="number">1</span>, lines), size=lines<span class="number">-1</span><span class="number">-1000000</span>, replace=<span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="comment">#sort the list</span></div><div class="line">skiplines=np.sort(skiplines)</div><div class="line"><span class="comment">#check our list</span></div><div class="line">print(<span class="string">'lines to skip:'</span>, len(skiplines))</div><div class="line">print(<span class="string">'remaining lines in sample:'</span>, lines-len(skiplines), <span class="string">'(remember that it includes the heading!)'</span>)</div><div class="line"></div><div class="line"><span class="comment">###################SANITY CHECK###################</span></div><div class="line"><span class="comment">#find lines that weren't skipped by checking difference between each consecutive line</span></div><div class="line"><span class="comment">#how many out of first 100000 will be imported into the csv?</span></div><div class="line">diff = skiplines[<span class="number">1</span>:<span class="number">100000</span>]-skiplines[<span class="number">2</span>:<span class="number">100001</span>]</div><div class="line">remain = sum(diff!=<span class="number">-1</span>)</div><div class="line">print(<span class="string">'Ratio of lines from first 100000 lines:'</span>,  <span class="string">'&#123;0:.5f&#125;'</span>.format(remain/<span class="number">100000</span>) ) </div><div class="line">print(<span class="string">'Ratio imported from all lines:'</span>, <span class="string">'&#123;0:.5f&#125;'</span>.format((lines-len(skiplines))/lines) )</div><div class="line">train = pd.read_csv(<span class="string">'../input/train.csv'</span>, skiprows=skiplines, dtype=dtypes)</div><div class="line">train.head()</div><div class="line"><span class="keyword">del</span> skiplines</div><div class="line">gc.collect()</div></pre></td></tr></table></figure><h2 id="4-使用pandas-的生成器，用chunk处理"><a href="#4-使用pandas-的生成器，用chunk处理" class="headerlink" title="4.使用pandas 的生成器，用chunk处理"></a>4.使用pandas 的生成器，用chunk处理</h2><p>这里我们使用np.where过滤掉‘is_attributed’为0的部分（例如<code>[xv if c else yv for (c,xv,yv) in zip(condition,x,y)]</code>）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#set up an empty dataframe</span></div><div class="line">df_converted = pd.DataFrame()</div><div class="line"></div><div class="line"><span class="comment">#we are going to work with chunks of size 1 million rows</span></div><div class="line">chunksize = <span class="number">10</span> ** <span class="number">6</span></div><div class="line"></div><div class="line"><span class="comment">#in each chunk, filter for values that have 'is_attributed'==1, and merge these values into one dataframe</span></div><div class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> pd.read_csv(<span class="string">'../input/train.csv'</span>, chunksize=chunksize, dtype=dtypes):</div><div class="line">    filtered = (chunk[(np.where(chunk[<span class="string">'is_attributed'</span>]==<span class="number">1</span>, <span class="keyword">True</span>, <span class="keyword">False</span>))])</div><div class="line">    df_converted = pd.concat([df_converted, filtered], ignore_index=<span class="keyword">True</span>, )</div></pre></td></tr></table></figure></p><h2 id="5-只载入若干列"><a href="#5-只载入若干列" class="headerlink" title="5.只载入若干列"></a>5.只载入若干列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#wanted columns</span></div><div class="line">columns = [<span class="string">'ip'</span>, <span class="string">'click_time'</span>, <span class="string">'is_attributed'</span>]</div><div class="line">dtypes = &#123;</div><div class="line">        <span class="string">'ip'</span>            : <span class="string">'uint32'</span>,</div><div class="line">        <span class="string">'is_attributed'</span> : <span class="string">'uint8'</span>,</div><div class="line">        &#125;</div><div class="line"></div><div class="line">ips_df = pd.read_csv(<span class="string">'../input/train.csv'</span>, usecols=columns, dtype=dtypes)</div><div class="line">print(ips_df.info())</div><div class="line">ips_df.head()</div><div class="line"><span class="string">'''</span></div><div class="line">&lt;class 'pandas.core.frame.DataFrame'&gt;</div><div class="line">RangeIndex: 184903890 entries, 0 to 184903889</div><div class="line">Data columns (total 3 columns):</div><div class="line">ip               uint32</div><div class="line">click_time       object</div><div class="line">is_attributed    uint8</div><div class="line">dtypes: object(1), uint32(1), uint8(1)</div><div class="line">memory usage: 2.2+ GB</div><div class="line">None'''</div></pre></td></tr></table></figure><h2 id="6-结合多种方法创意性的处理数据"><a href="#6-结合多种方法创意性的处理数据" class="headerlink" title="6.结合多种方法创意性的处理数据"></a>6.结合多种方法创意性的处理数据</h2><p>例如无法使用整个数据来groupby那么可以分块来做，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">size=<span class="number">100000</span></div><div class="line">all_rows = len(ips_df)</div><div class="line">num_parts = all_rows//size</div><div class="line"></div><div class="line"><span class="comment">#generate the first batch</span></div><div class="line">ip_sums = ips_df[<span class="number">0</span>:size][[<span class="string">'ip'</span>, <span class="string">'is_attributed'</span>]].groupby(<span class="string">'ip'</span>, as_index=<span class="keyword">False</span>).sum()</div><div class="line"></div><div class="line"><span class="comment">#add remaining batches</span></div><div class="line"><span class="keyword">for</span> p <span class="keyword">in</span> range(<span class="number">1</span>,num_parts):</div><div class="line">    start = p*size</div><div class="line">    end = p*size + size</div><div class="line">    <span class="keyword">if</span> end &lt; all_rows:</div><div class="line">        group = ips_df[start:end][[<span class="string">'ip'</span>, <span class="string">'is_attributed'</span>]].groupby(<span class="string">'ip'</span>, as_index=<span class="keyword">False</span>).sum()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        group = ips_df[start:][[<span class="string">'ip'</span>, <span class="string">'is_attributed'</span>]].groupby(<span class="string">'ip'</span>, as_index=<span class="keyword">False</span>).sum()</div><div class="line">    ip_sums = ip_sums.merge(group, on=<span class="string">'ip'</span>, how=<span class="string">'outer'</span>)</div><div class="line">    ip_sums.columns = [<span class="string">'ip'</span>, <span class="string">'sum1'</span>,<span class="string">'sum2'</span>]</div><div class="line">    ip_sums[<span class="string">'conversions_per_ip'</span>] = np.nansum((ip_sums[<span class="string">'sum1'</span>], ip_sums[<span class="string">'sum2'</span>]), axis = <span class="number">0</span>)</div><div class="line">    ip_sums.drop(columns=[<span class="string">'sum1'</span>, <span class="string">'sum2'</span>], axis = <span class="number">0</span>, inplace=<span class="keyword">True</span>)</div></pre></td></tr></table></figure><h2 id="7-使用dask代替pandas"><a href="#7-使用dask代替pandas" class="headerlink" title="7.使用dask代替pandas"></a>7.使用dask代替pandas</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import dask</div><div class="line">import dask.dataframe as dd</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近的一些比赛如&lt;a href=&quot;https://www.kaggle.com/c/talkingdata-adtracking-fraud-detection&quot;&gt;TalkingData AdTracking Fraud Detection Challenge | Kaggle&lt;/a&gt;提供了很大的数据集，一般来说，只有16G的内存的“小”电脑都无法直接处理这种数据集了，本文收集了一些关于处理这种数据的建议，供大家参考。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://frankchen.xyz/tags/python/"/>
    
      <category term="Data Science" scheme="http://frankchen.xyz/tags/Data-Science/"/>
    
      <category term="Kaggle" scheme="http://frankchen.xyz/tags/Kaggle/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之 sklearn中的pipeline</title>
    <link href="http://frankchen.xyz/2018/04/08/pipeline-in-machine-learning/"/>
    <id>http://frankchen.xyz/2018/04/08/pipeline-in-machine-learning/</id>
    <published>2018-04-08T08:13:42.000Z</published>
    <updated>2018-04-11T07:25:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/15231874915799.jpg" alt=""><br><a id="more"></a><br>如图所示，利用pipeline我们可以方便的减少代码量同时让机器学习的流程变得直观，<br><img src="/images/15231783974167.jpg" alt=""></p><p>例如我们需要做如下操作，容易看出，训练测试集重复了代码，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">vect = CountVectorizer()</div><div class="line">tfidf = TfidfTransformer()</div><div class="line">clf = SGDClassifier()</div><div class="line"></div><div class="line">vX = vect.fit_transform(Xtrain)</div><div class="line">tfidfX = tfidf.fit_transform(vX)</div><div class="line">predicted = clf.fit_predict(tfidfX)</div><div class="line"></div><div class="line"><span class="comment"># Now evaluate all steps on test set</span></div><div class="line">vX = vect.fit_transform(Xtest)</div><div class="line">tfidfX = tfidf.fit_transform(vX)</div><div class="line">predicted = clf.fit_predict(tfidfX)</div></pre></td></tr></table></figure><p>利用pipeline，上面代码可以抽象为，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">pipeline = Pipeline([</div><div class="line">    (<span class="string">'vect'</span>, CountVectorizer()),</div><div class="line">    (<span class="string">'tfidf'</span>, TfidfTransformer()),</div><div class="line">    (<span class="string">'clf'</span>, SGDClassifier()),</div><div class="line">])</div><div class="line">predicted = pipeline.fit(Xtrain).predict(Xtrain)</div><div class="line"><span class="comment"># Now evaluate all steps on test set</span></div><div class="line">predicted = pipeline.predict(Xtest)</div></pre></td></tr></table></figure><p>注意，pipeline最后一步如果有predict()方法我们才可以对pipeline使用fit_predict()，同理，最后一步如果有transform()方法我们才可以对pipeline使用fit_transform()方法。</p><h2 id="使用pipeline做cross-validation"><a href="#使用pipeline做cross-validation" class="headerlink" title="使用pipeline做cross validation"></a>使用pipeline做cross validation</h2><p>看如下案例，即先对输入手写数字的数据进行PCA降维，再通过逻辑回归预测标签。其中我们通过pipeline对<br>PCA的降维维数n_components和逻辑回归的正则项C大小做交叉验证，主要步骤有：</p><ol><li>依次实例化各成分对象如<code>pca = decomposition.PCA()</code></li><li>以(name, object)的tuble为元素组装pipeline如<code>Pipeline(steps=[(&#39;pca&#39;, pca), (&#39;logistic&#39;, logistic)])</code></li><li>初始化CV参数如<code>n_components = [20, 40, 64]</code></li><li>实例化CV对象如<code>estimator = GridSearchCV(pipe, dict(pca__n_components=n_components, logistic__C=Cs))</code>，其中注意参数的传递方式，即key为pipeline元素名+函数参数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model, decomposition, datasets</div><div class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</div><div class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</div><div class="line">logistic = linear_model.LogisticRegression()</div><div class="line"></div><div class="line">pca = decomposition.PCA()</div><div class="line">pipe = Pipeline(steps=[(<span class="string">'pca'</span>, pca), (<span class="string">'logistic'</span>, logistic)])</div><div class="line"></div><div class="line">digits = datasets.load_digits()</div><div class="line">X_digits = digits.data</div><div class="line">y_digits = digits.target</div><div class="line"></div><div class="line"><span class="comment"># Prediction</span></div><div class="line">n_components = [<span class="number">20</span>, <span class="number">40</span>, <span class="number">64</span>]</div><div class="line">Cs = np.logspace(<span class="number">-4</span>, <span class="number">4</span>, <span class="number">3</span>)</div><div class="line"></div><div class="line">pca.fit(X_digits)</div><div class="line">estimator = GridSearchCV(pipe,</div><div class="line">                         dict(pca__n_components=n_components, logistic__C=Cs))</div><div class="line">estimator.fit(X_digits, y_digits)</div><div class="line"></div><div class="line">plt.figure(<span class="number">1</span>, figsize=(<span class="number">4</span>, <span class="number">3</span>))</div><div class="line">plt.clf()</div><div class="line">plt.axes([<span class="number">.2</span>, <span class="number">.2</span>, <span class="number">.7</span>, <span class="number">.7</span>])</div><div class="line">plt.plot(pca.explained_variance_, linewidth=<span class="number">2</span>)</div><div class="line">plt.axis(<span class="string">'tight'</span>)</div><div class="line">plt.xlabel(<span class="string">'n_components'</span>)</div><div class="line">plt.ylabel(<span class="string">'explained_variance_'</span>)</div><div class="line">plt.axvline(</div><div class="line">    estimator.best_estimator_.named_steps[<span class="string">'pca'</span>].n_components,</div><div class="line">    linestyle=<span class="string">':'</span>,</div><div class="line">    label=<span class="string">'n_components chosen'</span>)</div><div class="line">plt.legend(prop=dict(size=<span class="number">12</span>))</div><div class="line">plt.show()</div></pre></td></tr></table></figure><h2 id="自定义transformer"><a href="#自定义transformer" class="headerlink" title="自定义transformer"></a>自定义transformer</h2><p>我们可以如下自定义transformer（来自<a href="http://michelleful.github.io/code-blog/2015/06/20/pipelines/" target="_blank" rel="external">Using Pipelines and FeatureUnions in scikit-learn - Michelle Fullwood</a>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sklearn.base <span class="keyword">import</span> BaseEstimator, TransformerMixin</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleExtractor</span><span class="params">(BaseEstimator, TransformerMixin)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, vars)</span>:</span></div><div class="line">        self.vars = vars  <span class="comment"># e.g. pass in a column name to extract</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transform</span><span class="params">(self, X, y=None)</span>:</span></div><div class="line">        <span class="keyword">return</span> do_something_to(X, self.vars)  <span class="comment"># where the actual feature extraction happens</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, X, y=None)</span>:</span></div><div class="line">        <span class="keyword">return</span> self  <span class="comment"># generally does nothing</span></div></pre></td></tr></table></figure><p>另外，我们也可以对每个feature单独处理，例如下面的这个比较大的流水线（来自<a href="http://zacstewart.com/2014/08/05/pipelines-of-featureunions-of-pipelines.html" target="_blank" rel="external">Using scikit-learn Pipelines and FeatureUnions | zacstewart.com</a>），我们可以发现作者的pipeline中，首先是一个叫做<code>features</code>的FeatureUnion，其中，每个特征分别以一个pipeline来处理，这个pipeline首先是一个<code>ColumnExtractor</code>提取出这个特征，后续进行一系列处理转换，最终这些pipeline组合为特征组合，再喂给一系列<code>ModelTransformer</code>包装的模型来predict，最终使用<code>KNeighborsRegressor</code>预测（相当于两层stacking）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">pipeline = Pipeline([</div><div class="line">    (<span class="string">'features'</span>, FeatureUnion([</div><div class="line">        (<span class="string">'continuous'</span>, Pipeline([</div><div class="line">            (<span class="string">'extract'</span>, ColumnExtractor(CONTINUOUS_FIELDS)),</div><div class="line">            (<span class="string">'scale'</span>, Normalizer())</div><div class="line">        ])),</div><div class="line">        (<span class="string">'factors'</span>, Pipeline([</div><div class="line">            (<span class="string">'extract'</span>, ColumnExtractor(FACTOR_FIELDS)),</div><div class="line">            (<span class="string">'one_hot'</span>, OneHotEncoder(n_values=<span class="number">5</span>)),</div><div class="line">            (<span class="string">'to_dense'</span>, DenseTransformer())</div><div class="line">        ])),</div><div class="line">        (<span class="string">'weekday'</span>, Pipeline([</div><div class="line">            (<span class="string">'extract'</span>, DayOfWeekTransformer()),</div><div class="line">            (<span class="string">'one_hot'</span>, OneHotEncoder()),</div><div class="line">            (<span class="string">'to_dense'</span>, DenseTransformer())</div><div class="line">        ])),</div><div class="line">        (<span class="string">'hour_of_day'</span>, HourOfDayTransformer()),</div><div class="line">        (<span class="string">'month'</span>, Pipeline([</div><div class="line">            (<span class="string">'extract'</span>, ColumnExtractor([<span class="string">'datetime'</span>])),</div><div class="line">            (<span class="string">'to_month'</span>, DateTransformer()),</div><div class="line">            (<span class="string">'one_hot'</span>, OneHotEncoder()),</div><div class="line">            (<span class="string">'to_dense'</span>, DenseTransformer())</div><div class="line">        ])),</div><div class="line">        (<span class="string">'growth'</span>, Pipeline([</div><div class="line">            (<span class="string">'datetime'</span>, ColumnExtractor([<span class="string">'datetime'</span>])),</div><div class="line">            (<span class="string">'to_numeric'</span>, MatrixConversion(int)),</div><div class="line">            (<span class="string">'regression'</span>, ModelTransformer(LinearRegression()))</div><div class="line">        ]))</div><div class="line">    ])),</div><div class="line">    (<span class="string">'estimators'</span>, FeatureUnion([</div><div class="line">        (<span class="string">'knn'</span>, ModelTransformer(KNeighborsRegressor(n_neighbors=<span class="number">5</span>))),</div><div class="line">        (<span class="string">'gbr'</span>, ModelTransformer(GradientBoostingRegressor())),</div><div class="line">        (<span class="string">'dtr'</span>, ModelTransformer(DecisionTreeRegressor())),</div><div class="line">        (<span class="string">'etr'</span>, ModelTransformer(ExtraTreesRegressor())),</div><div class="line">        (<span class="string">'rfr'</span>, ModelTransformer(RandomForestRegressor())),</div><div class="line">        (<span class="string">'par'</span>, ModelTransformer(PassiveAggressiveRegressor())),</div><div class="line">        (<span class="string">'en'</span>, ModelTransformer(ElasticNet())),</div><div class="line">        (<span class="string">'cluster'</span>, ModelTransformer(KMeans(n_clusters=<span class="number">2</span>)))</div><div class="line">    ])),</div><div class="line">    (<span class="string">'estimator'</span>, KNeighborsRegressor())</div><div class="line">])</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HourOfDayTransformer</span><span class="params">(TransformerMixin)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transform</span><span class="params">(self, X, **transform_params)</span>:</span></div><div class="line">        hours = DataFrame(X[<span class="string">'datetime'</span>].apply(<span class="keyword">lambda</span> x: x.hour))</div><div class="line">        <span class="keyword">return</span> hours</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, X, y=None, **fit_params)</span>:</span></div><div class="line">        <span class="keyword">return</span> self</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelTransformer</span><span class="params">(TransformerMixin)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, model)</span>:</span></div><div class="line">        self.model = model</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        self.model.fit(*args, **kwargs)</div><div class="line">        <span class="keyword">return</span> self</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transform</span><span class="params">(self, X, **transform_params)</span>:</span></div><div class="line">        <span class="keyword">return</span> DataFrame(self.model.predict(X))</div></pre></td></tr></table></figure><h2 id="FeatureUnion"><a href="#FeatureUnion" class="headerlink" title="FeatureUnion"></a>FeatureUnion</h2><p><a href="http://scikit-learn.org/stable/modules/generated/sklearn.pipeline.FeatureUnion.html" target="_blank" rel="external">sklearn.pipeline.FeatureUnion — scikit-learn 0.19.1 documentation</a> 和pipeline的序列执行不同，FeatureUnion指的是并行地应用许多transformer在input上，再将结果合并，所以自然地适合特征工程中的增加特征，而FeatureUnion与pipeline组合可以方便的完成许多复杂的操作，例如如下的例子，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">pipeline = Pipeline([</div><div class="line">  (<span class="string">'extract_essays'</span>, EssayExractor()),</div><div class="line">  (<span class="string">'features'</span>, FeatureUnion([</div><div class="line">    (<span class="string">'ngram_tf_idf'</span>, Pipeline([</div><div class="line">      (<span class="string">'counts'</span>, CountVectorizer()),</div><div class="line">      (<span class="string">'tf_idf'</span>, TfidfTransformer())</div><div class="line">    ])),</div><div class="line">    (<span class="string">'essay_length'</span>, LengthTransformer()),</div><div class="line">    (<span class="string">'misspellings'</span>, MispellingCountTransformer())</div><div class="line">  ])),</div><div class="line">  (<span class="string">'classifier'</span>, MultinomialNB())</div><div class="line">])</div></pre></td></tr></table></figure><p>整个<code>features</code>是一个FeatureUnion，而其中的ngram_tf_idf又是一个包括两步的pipeline。<br><img src="/images/15233302459256.jpg" alt=""></p><p>下面的例子中，使用FeatureUnion结合PCA降维后特征以及选择原特征中的几个作为特征组合再喂给SVM分类，最后用grid_search 做了 pca的<code>n_components</code>、SelectKBest的<code>k</code>以及SVM的<code>C</code>的CV。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline, FeatureUnion</div><div class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</div><div class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</div><div class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</div><div class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</div><div class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectKBest</div><div class="line"></div><div class="line">iris = load_iris()</div><div class="line"></div><div class="line">X, y = iris.data, iris.target</div><div class="line"></div><div class="line">print(X.shape, y.shape)</div><div class="line"></div><div class="line"><span class="comment"># This dataset is way too high-dimensional. Better do PCA:</span></div><div class="line">pca = PCA()</div><div class="line"></div><div class="line"><span class="comment"># Maybe some original features where good, too?</span></div><div class="line">selection = SelectKBest()</div><div class="line"></div><div class="line"><span class="comment"># Build estimator from PCA and Univariate selection:</span></div><div class="line"></div><div class="line">svm = SVC(kernel=<span class="string">"linear"</span>)</div><div class="line"></div><div class="line"><span class="comment"># Do grid search over k, n_components and C:</span></div><div class="line"></div><div class="line">pipeline = Pipeline([(<span class="string">"features"</span>,</div><div class="line">                      FeatureUnion([(<span class="string">"pca"</span>, pca), (<span class="string">"univ_select"</span>,</div><div class="line">                                                   selection)])), (<span class="string">"svm"</span>,</div><div class="line">                                                                   svm)])</div><div class="line"></div><div class="line">param_grid = dict(</div><div class="line">    features__pca__n_components=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</div><div class="line">    features__univ_select__k=[<span class="number">1</span>, <span class="number">2</span>],</div><div class="line">    svm__C=[<span class="number">0.1</span>, <span class="number">1</span>, <span class="number">10</span>])</div><div class="line"></div><div class="line">grid_search = GridSearchCV(pipeline, param_grid=param_grid, verbose=<span class="number">10</span>)</div><div class="line">grid_search.fit(X, y)</div><div class="line"></div><div class="line">grid_search.best_estimator_</div><div class="line">grid_search.best_params_</div><div class="line">grid_search.best_score_</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/15231874915799.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Data Science" scheme="http://frankchen.xyz/tags/Data-Science/"/>
    
  </entry>
  
  <entry>
    <title>VPS搭建私人BT离线服务器</title>
    <link href="http://frankchen.xyz/2018/04/08/private-BT-server/"/>
    <id>http://frankchen.xyz/2018/04/08/private-BT-server/</id>
    <published>2018-04-08T03:13:51.000Z</published>
    <updated>2018-04-08T03:47:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/15231584798585.jpg" alt=""><br>使用闲置的VPS搭建私人BT离线服务器的方法，亦或者推广至树莓派或者家用路由器亦可。<br><a id="more"></a> </p><h2 id="安装及配置-Transmission"><a href="#安装及配置-Transmission" class="headerlink" title="安装及配置 Transmission"></a>安装及配置 Transmission</h2><ul><li>安装 <code>sudo apt-get install transmission-daemon</code></li><li>配置 停止服务（否则配置文件锁定，无法修改）<code>sudo service transmission-daemon stop</code></li><li>编辑配置文件</li></ul><p><code>sudo vim /etc/transmission-daemon/settings.json</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"ratio-limit"</span>: 0.0100, </div><div class="line">    <span class="string">"ratio-limit-enabled"</span>: <span class="literal">true</span>,  </div><div class="line">    <span class="string">"rpc-password"</span>: <span class="string">"*******"</span>,   </div><div class="line">    <span class="string">"rpc-username"</span>: <span class="string">"frank"</span>,</div><div class="line">    <span class="string">"download-dir"</span>: <span class="string">"/var/www/html/Downloads"</span>, </div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 我只列出了我修改过且无法在 Transmission Web-GUI 中无法完成修改的几项，四项依次是下载完成做种率，开启限制做种率，Web-GUI 密码，Web-GUI 用户名。像保存路径，下载/ 上传速度限制，都可以在 Web-GUI 中直接设定，为了方便之后对下载文件的 Web 管理，我直接将保存路径改到了 Web 发布路径下的一个子目录。</p><p> 重启服务</p><p> <code>sudo service transmission-daemon start</code></p><p> 此时在浏览器打开<code>VPS的IP地址/域名:9091</code>并输入刚刚设置的用户名及密码应该就可以访问 Transmission 的 Web-GUI了。<br> <img src="/images/Screen%20Shot%202018-04-08%20at%2011.25.35.png" alt="Screen Shot 2018-04-08 at 11.25.35"></p><p> 可是在添加了第一个任务后出现保存路径写入权限的问题。<br>解决办法如<a href="https://askubuntu.com/questions/221081/permission-denied-when-downloading-with-transmission-deamon" target="_blank" rel="external">Permission denied when downloading with transmission deamon - Ask Ubuntu</a>所示：</p><p>我们的下载地址是 <code>/var/www/html/Downloads</code> 用户名是<code>znwindy</code>:<br>那么 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将本用户加入 `debian-transmission`组</span></div><div class="line">sudo usermod <span class="_">-a</span> -G debian-transmission znwindy</div><div class="line"><span class="comment"># 文件夹所有者</span></div><div class="line">sudo chgrp debian-transmission /var/www/html/Downloads</div><div class="line"><span class="comment"># 组添加写权限</span></div><div class="line">sudo chmod -R 755 /var/www</div><div class="line"><span class="comment"># 停止后台deamon </span></div><div class="line"></div><div class="line">sudo service transmission-daemon stop</div><div class="line"><span class="comment"># 更改 file creation mask</span></div><div class="line">sudo vim /etc/transmission-daemon/settings.json</div><div class="line"><span class="comment"># 把"umask": 18 改为 "umask": 2</span></div><div class="line"><span class="comment"># 重启服务</span></div><div class="line">sudo service transmission-daemon start</div></pre></td></tr></table></figure><p>即可解决写的问题。</p><h2 id="配置-Apache-加密区域"><a href="#配置-Apache-加密区域" class="headerlink" title="配置 Apache 加密区域"></a>配置 Apache 加密区域</h2><p>安装apache2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install apache2</div></pre></td></tr></table></figure><p>Adjust the Firewall</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo ufw app list</div><div class="line">sudo ufw allow <span class="string">'Apache Full'</span></div><div class="line">sudo ufw status</div><div class="line">sudo systemctl status apache2</div></pre></td></tr></table></figure><p>密码生成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo htpasswd -c /etc/apache2/.htpasswd 用户名</div></pre></td></tr></table></figure><p>然后会被提示输入两次该 “用户名” 的密码。</p><p>修改虚拟 host 的配置文件<br><code>sudo vim /etc/apache2/sites-enabled/000-default.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Directory <span class="string">"/var/www/html"</span>&gt;</div><div class="line">        AuthType Basic</div><div class="line">        AuthName <span class="string">"Restricted Content"</span></div><div class="line">        AuthUserFile /etc/apache2/.htpasswd</div><div class="line">        Require valid-user</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure><p>保存后重启</p><p><code>sudo service apache2 restart</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过 HTTP 将下载的任务取回本地，速度也很快！这样，通过访问 Transmission Web-GUI “投喂” 种子，磁力链，然后在下载完成后通过 HTTP 方式从 VPS 将资源取回本地，甚至直接对 .mp3、.mp4 等文件格式进行在线播放，实现了一个简化版的迅雷离线下载，可是它却在下载某些特定资源时远比迅雷离线管用。</p><h2 id="参考自"><a href="#参考自" class="headerlink" title="参考自"></a>参考自</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/24478342" target="_blank" rel="external">在 VPS 上搭建私人离线下载</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/15231584798585.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;使用闲置的VPS搭建私人BT离线服务器的方法，亦或者推广至树莓派或者家用路由器亦可。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://frankchen.xyz/tags/Linux/"/>
    
      <category term="Old Driver" scheme="http://frankchen.xyz/tags/Old-Driver/"/>
    
  </entry>
  
  <entry>
    <title>numpy 中增加channel的方法</title>
    <link href="http://frankchen.xyz/2018/03/29/numpy-add-channel/"/>
    <id>http://frankchen.xyz/2018/03/29/numpy-add-channel/</id>
    <published>2018-03-29T12:15:30.000Z</published>
    <updated>2018-03-29T12:48:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/15223277046847.jpg" alt=""><br>numpy 数组中一维怎么转二维和多维？简述 numpy 中增加channel的方法。</p><a id="more"></a><p>在机器学习中，所有的数据都是向量和矩阵，而怎么根据我们所要解决的问题来调整模型以及数据的格式，也就是矩阵的维度和大小是一项重要的基本功，那么本文就具体介绍下numpy中数组的转换，也就是增加channel的方法。</p><h2 id="一维转二维"><a href="#一维转二维" class="headerlink" title="一维转二维"></a>一维转二维</h2><p>例如我们有一个一维的numpy array，有如下方法可以转为二维</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">a = np.arange(<span class="number">10</span>)</div><div class="line">a</div><div class="line">a.shape</div><div class="line">b = a[:,<span class="keyword">None</span>]</div><div class="line">b</div><div class="line">b.shape</div><div class="line"><span class="string">'''</span></div><div class="line">array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</div><div class="line">(10,)</div><div class="line">array([[0],</div><div class="line">       [1],</div><div class="line">       [2],</div><div class="line">       [3],</div><div class="line">       [4],</div><div class="line">       [5],</div><div class="line">       [6],</div><div class="line">       [7],</div><div class="line">       [8],</div><div class="line">       [9]])</div><div class="line">(10, 1)</div><div class="line">'''</div></pre></td></tr></table></figure><p> 可以看到，<code>a</code>确实被转为了二维，以下方法是一样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">c = a[:,np.newaxis]</div><div class="line">c</div><div class="line">(c == b).all()</div><div class="line">np.newaxis == <span class="keyword">None</span></div><div class="line"><span class="string">'''</span></div><div class="line">array([[0],</div><div class="line">       [1],</div><div class="line">       [2],</div><div class="line">       [3],</div><div class="line">       [4],</div><div class="line">       [5],</div><div class="line">       [6],</div><div class="line">       [7],</div><div class="line">       [8],</div><div class="line">       [9]])</div><div class="line">True</div><div class="line">True</div><div class="line">'''</div></pre></td></tr></table></figure><h2 id="转为多维"><a href="#转为多维" class="headerlink" title="转为多维"></a>转为多维</h2><p>时间序列预测中，我们一般需要的是(sample，time_stamp，feature)的3 个channel的数据，即一个三维矩阵，包含若干个sample，每个sample包含若干个时间序列点，而每个时间序列点有包括若干个feature，哪怕我们只是做单变量的时间序列预测，输入RNN网络例如LSTM的时候，数据也必须是三维的格式，下面我们讲一讲这么做的方法。</p><p>例如我们有一个若干个时间点每个时间点有两个特征的数据，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">a = np.arange(<span class="number">24</span>).reshape((<span class="number">-1</span>,<span class="number">2</span>))</div><div class="line">a.shape</div><div class="line">a</div><div class="line"><span class="string">'''</span></div><div class="line">(12, 2)</div><div class="line">array([[ 0,  1],</div><div class="line">       [ 2,  3],</div><div class="line">       [ 4,  5],</div><div class="line">       [ 6,  7],</div><div class="line">       [ 8,  9],</div><div class="line">       [10, 11],</div><div class="line">       [12, 13],</div><div class="line">       [14, 15],</div><div class="line">       [16, 17],</div><div class="line">       [18, 19],</div><div class="line">       [20, 21],</div><div class="line">       [22, 23]])</div><div class="line">'''</div></pre></td></tr></table></figure><p>我们将a转化为三个channel，即可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">b = a[:,<span class="keyword">None</span>,:]</div><div class="line">b.shape</div><div class="line">b</div><div class="line"><span class="string">'''</span></div><div class="line">(12, 1, 2)</div><div class="line">array([[[ 0,  1]],</div><div class="line"></div><div class="line">       [[ 2,  3]],</div><div class="line"></div><div class="line">       [[ 4,  5]],</div><div class="line"></div><div class="line">       [[ 6,  7]],</div><div class="line"></div><div class="line">       [[ 8,  9]],</div><div class="line"></div><div class="line">       [[10, 11]],</div><div class="line"></div><div class="line">       [[12, 13]],</div><div class="line"></div><div class="line">       [[14, 15]],</div><div class="line"></div><div class="line">       [[16, 17]],</div><div class="line"></div><div class="line">       [[18, 19]],</div><div class="line"></div><div class="line">       [[20, 21]],</div><div class="line"></div><div class="line">       [[22, 23]]])</div><div class="line">       '''</div></pre></td></tr></table></figure><p>以上对应着pandas的Dataframe，及我们对Dataframe取values属性，会得到一个二维矩阵，做法就如同上面一样，但是如果是Series的话，取values属性得到的是一个一维的，这时候我们的做法则是，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">c = np.arange(<span class="number">12</span>)</div><div class="line">c</div><div class="line">d = c[:,<span class="keyword">None</span>,<span class="keyword">None</span>]</div><div class="line">d.shape</div><div class="line">d</div><div class="line"><span class="string">'''</span></div><div class="line">array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])</div><div class="line">(12, 1, 1)</div><div class="line">array([[[ 0]],</div><div class="line"></div><div class="line">       [[ 1]],</div><div class="line"></div><div class="line">       [[ 2]],</div><div class="line"></div><div class="line">       [[ 3]],</div><div class="line"></div><div class="line">       [[ 4]],</div><div class="line"></div><div class="line">       [[ 5]],</div><div class="line"></div><div class="line">       [[ 6]],</div><div class="line"></div><div class="line">       [[ 7]],</div><div class="line"></div><div class="line">       [[ 8]],</div><div class="line"></div><div class="line">       [[ 9]],</div><div class="line"></div><div class="line">       [[10]],</div><div class="line"></div><div class="line">       [[11]]])</div><div class="line">'''</div></pre></td></tr></table></figure><h2 id="减少维度"><a href="#减少维度" class="headerlink" title="减少维度"></a>减少维度</h2><p>若要减少数据的维度，我们可以用的方法如下，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">d = np.arange(<span class="number">12</span>)[:,<span class="keyword">None</span>,<span class="keyword">None</span>]</div><div class="line">d.shape</div><div class="line">d</div><div class="line">e = np.squeeze(d)</div><div class="line">e.shape</div><div class="line">e</div><div class="line"><span class="string">'''(12, 1, 1)</span></div><div class="line">array([[[ 0]],</div><div class="line"></div><div class="line">       [[ 1]],</div><div class="line"></div><div class="line">       [[ 2]],</div><div class="line"></div><div class="line">       [[ 3]],</div><div class="line"></div><div class="line">       [[ 4]],</div><div class="line"></div><div class="line">       [[ 5]],</div><div class="line"></div><div class="line">       [[ 6]],</div><div class="line"></div><div class="line">       [[ 7]],</div><div class="line"></div><div class="line">       [[ 8]],</div><div class="line"></div><div class="line">       [[ 9]],</div><div class="line"></div><div class="line">       [[10]],</div><div class="line"></div><div class="line">       [[11]]])</div><div class="line">(12,)</div><div class="line">array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])'''</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/15223277046847.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;numpy 数组中一维怎么转二维和多维？简述 numpy 中增加channel的方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://frankchen.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 正则实用例子</title>
    <link href="http://frankchen.xyz/2018/02/24/re-basic-of-python/"/>
    <id>http://frankchen.xyz/2018/02/24/re-basic-of-python/</id>
    <published>2018-02-24T10:52:00.000Z</published>
    <updated>2018-02-24T11:09:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/15194705842254.png" alt=""></p><p>本文主要关于python的正则表达式的符号与方法。</p><a id="more"></a><ul><li>findall: 找寻所有匹配，返回所有组合的列表</li><li>search: 找寻第一个匹配并返回</li><li>sub: 替换符合规律的内容，并返回替换后的内容</li></ul><p><strong>.</strong>：匹配除了换行符以外的任意字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = <span class="string">'xy123'</span></div><div class="line">b = re.findall(<span class="string">'x...'</span>,a)</div><div class="line">print(b)</div><div class="line"><span class="comment"># ['xy12']</span></div></pre></td></tr></table></figure><p><strong>*</strong>：匹配前一个字符0次或者无限次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = <span class="string">'xyxy123'</span></div><div class="line">b = re.findall(<span class="string">'x*'</span>,a)</div><div class="line">print(b)</div><div class="line"><span class="comment"># ['x', '', 'x', '', '', '', '', '']</span></div></pre></td></tr></table></figure><p><strong>?</strong>：匹配前一个字符0次或者1次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = <span class="string">'xy123'</span></div><div class="line">b = re.findall(<span class="string">'x?'</span>,a)</div><div class="line">print(b)</div><div class="line"><span class="comment"># ['x', '', '', '', '', '']</span></div></pre></td></tr></table></figure><p><strong>.*</strong>：贪心算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">b = re.findall(<span class="string">'xx.*xx'</span>,secret_code)</div><div class="line">print(b)</div><div class="line"><span class="comment"># ['xxIxxfasdjifja134xxlovexx23345sdfxxyouxx']</span></div></pre></td></tr></table></figure><p><strong>.*?</strong>：非贪心算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">c = re.findall(<span class="string">'xx.*?xx'</span>,secret_code)</div><div class="line">print(c)</div><div class="line"><span class="comment"># ['xxIxx', 'xxlovexx', 'xxyouxx']</span></div></pre></td></tr></table></figure><p><strong>()</strong>：括号内结果返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">d = re.findall(<span class="string">'xx(.*?)xx'</span>,secret_code)</div><div class="line">print(d)</div><div class="line"><span class="keyword">for</span> each <span class="keyword">in</span> d:</div><div class="line">    print(each)</div><div class="line"><span class="comment"># ['I', 'love', 'you']</span></div><div class="line"><span class="comment"># I</span></div><div class="line"><span class="comment"># love</span></div><div class="line"><span class="comment"># you</span></div></pre></td></tr></table></figure><p><strong>re.S</strong>使得.的作用域包括换行符”\n”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'''sdfxxhello</span></div><div class="line">xxfsdfxxworldxxasdf'''</div><div class="line"></div><div class="line">d = re.findall(<span class="string">'xx(.*?)xx'</span>,s,re.S)</div><div class="line">print(d)</div><div class="line"><span class="comment">#  ['hello\n', 'world']</span></div></pre></td></tr></table></figure><p>对比findall与search的区别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">s2 = <span class="string">'asdfxxIxx123xxlovexxdfd'</span></div><div class="line">f = re.search(<span class="string">'xx(.*?)xx123xx(.*?)xx'</span>,s2).group(<span class="number">2</span>)</div><div class="line">print(f)</div><div class="line">f2 = re.findall(<span class="string">'xx(.*?)xx123xx(.*?)xx'</span>,s2)</div><div class="line">print(f2[<span class="number">0</span>][<span class="number">1</span>])</div><div class="line"><span class="comment"># love</span></div><div class="line"><span class="comment"># love</span></div></pre></td></tr></table></figure><p>虽然两者结果相同，但是search是搭配group来得到第二个匹配，而findall的结果是[(‘I’, ‘love’)]，包含元组的列表，所以需要f2[0][1]来引入。</p><p><strong>sub</strong>的使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'123rrrrr123'</span></div><div class="line">output = re.sub(<span class="string">'123(.*?)123'</span>,<span class="string">'123%d123'</span>%<span class="number">789</span>,s)</div><div class="line">print(output)</div><div class="line"><span class="comment"># 123789123</span></div></pre></td></tr></table></figure><p>例如我们需要将文档中的所有的png图片改变路径，即需要找到所有的<code>.png</code>结尾，再将其都加上路径，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(m)</span>:</span></div><div class="line">    <span class="comment"># Convert group 0 to an integer.</span></div><div class="line">    v = m.group(<span class="number">0</span>)</div><div class="line">    print(v)</div><div class="line">    <span class="comment"># Multiply integer by 2.</span></div><div class="line">    <span class="comment"># ... Convert back into string and return it.</span></div><div class="line">    print(<span class="string">'basic/'</span>+v)</div><div class="line">    <span class="keyword">return</span> <span class="string">'basic/'</span>+v</div></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>autoencoder.png</div><div class="line">    basic/autoencoder.png</div><div class="line">    RNN.png</div><div class="line">    basic/RNN.png</div><div class="line">    rnn_step_forward.png</div><div class="line">    basic/rnn_step_forward.png</div><div class="line">    rnns.png</div><div class="line">    basic/rnns.png</div><div class="line">    rnn_cell_backprop.png</div><div class="line">    basic/rnn_cell_backprop.png</div><div class="line">    LSTM.png</div><div class="line">    basic/LSTM.png</div><div class="line">    LSTM_rnn.png</div><div class="line">    basic/LSTM_rnn.png</div><div class="line">    attn_mechanism.png</div><div class="line">    basic/attn_mechanism.png</div><div class="line">    attn_model.png</div><div class="line">    basic/attn_model.png</div></pre></td></tr></table></figure><p>仿照上面案例，我们可以方便的对我们的任务进行定制。</p><p><strong>subn</strong> 相比sub，subn返回元组，第二个元素表示替换发生的次数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(m)</span>:</span></div><div class="line">    <span class="comment"># Convert.</span></div><div class="line">    v = int(m.group(<span class="number">0</span>))</div><div class="line">    <span class="comment"># Add 2.</span></div><div class="line">    <span class="keyword">return</span> str(v + <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># Call re.subn.</span></div><div class="line">result = re.subn(<span class="string">"\d+"</span>, add, <span class="string">"1 2 3 4 5"</span>)</div><div class="line"></div><div class="line">print(<span class="string">"Result string:"</span>, result[<span class="number">0</span>])</div><div class="line">print(<span class="string">"Number of substitutions:"</span>, result[<span class="number">1</span>])</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line">Result string: <span class="number">11</span> <span class="number">21</span> <span class="number">31</span> <span class="number">41</span> <span class="number">51</span></div><div class="line">Number of substitutions: <span class="number">5</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/15194705842254.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文主要关于python的正则表达式的符号与方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://frankchen.xyz/tags/python/"/>
    
      <category term="re" scheme="http://frankchen.xyz/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>Tex 写（中文）毕业论文全攻略</title>
    <link href="http://frankchen.xyz/2018/02/08/Writing-Graduation-Thesis-in-Tex/"/>
    <id>http://frankchen.xyz/2018/02/08/Writing-Graduation-Thesis-in-Tex/</id>
    <published>2018-02-07T17:36:41.000Z</published>
    <updated>2018-02-07T18:11:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/15180252634406.png" alt=""></p><p>用 Tex 写（中文）毕业论文全攻略，高效、便捷、优雅！</p><a id="more"></a><p>这里我们并不存在鄙视链，说什么Tex 优于 Word之类的，其实Word作为极其复杂的文本处理软件，我相信Tex能做到的，Word一定有其实现方式，只不过大部分人都只会用到Word的一小部分功能，相比Word，Tex解决方案更加便捷优雅，比如自动排号（章节、表格、参考文献的编号），全局设置的字体、间距格式等等。相比Word事无巨细的维护修改成本，Tex 的解决方案更加programmer，即软件开发，后期主要工作是迭代维护，若能在前期即考虑这点，后期能省下极多的脑细胞和精力。好了不说多，发车吧~</p><h2 id="总论"><a href="#总论" class="headerlink" title="总论"></a>总论</h2><p> 总体来说，是用上交Tex模板结合Atom编辑器在本地编辑<a href="https://atom.io/" target="_blank" rel="external">Atom</a>（这个用什么编辑器随意）以及Dropbox同步到云端<a href="https://www.dropbox.com/h" target="_blank" rel="external">Dropbox</a>以及云端上在sharelatex服务器上即时编译所见即所得。</p><h2 id="工具使用方法"><a href="#工具使用方法" class="headerlink" title="工具使用方法"></a>工具使用方法</h2><p>首先我们在sharelatex官网<a href="https://www.sharelatex.com/project" target="_blank" rel="external">Your Projects - ShareLaTeX, Online LaTeX Editor</a>注册账号，免费账号即可，如果需要多人协作可以用邀请小号的方式让自己增加权限（sharelatex新建账号不验证邮箱。。所以你懂的），接下来在上交模板<a href="https://github.com/sjtug/SJTUThesis" target="_blank" rel="external">sjtug/SJTUThesis: 上海交通大学 XeLaTeX 学位论文模板 A XeLaTeX template for Shanghai Jiao Tong University (SJTU) thesis.</a>处点击此处添加最新版模板到我们的sharelatex项目，<br><img src="/images/Screen%20Shot%202018-02-08%20at%2001.58.25.png" alt="Screen Shot 2018-02-08 at 01.58.25"></p><p><img src="/images/Screen%20Shot%202018-02-08%20at%2001.58.56.png" alt="Screen Shot 2018-02-08 at 01.58.56"></p><p>如图，再点进去，先别急着修改，我们先设置个网盘同步，Dropbox需要梯子，在sharelatex的账号设置处链接到Dropbox，<br><img src="/images/Screen%20Shot%202018-02-08%20at%2002.00.57.png" alt="Screen Shot 2018-02-08 at 02.00.57"></p><p>同时Dropbox安装一个桌面版，需要设置代理，<br><img src="/images/Screen%20Shot%202018-02-08%20at%2002.02.29.png" alt="Screen Shot 2018-02-08 at 02.02.29"><br>如图，我们使用ss作为代理。</p><p>接下来安装Atom编辑器，在插件里装一个如下插件，这里我们需要它只是为了注释这一个功能，因为我们不需要本地编译。<br><img src="/images/Screen%20Shot%202018-02-08%20at%2002.03.38.png" alt="Screen Shot 2018-02-08 at 02.03.38"></p><p>接下来我们就可以在本地用Atom编辑Dropbox网盘在本地的Tex项目，只要我们保存，Dropbox就会同步到sharelatex，如果开启自动编译云端就会展示当下编译的PDF效果，如图<br><img src="/images/Screen%20Shot%202018-02-08%20at%2002.07.11.png" alt="Screen Shot 2018-02-08 at 02.07.11"></p><h2 id="Tex模板使用说明"><a href="#Tex模板使用说明" class="headerlink" title="Tex模板使用说明"></a>Tex模板使用说明</h2><p>详见此处<a href="http://sjtug.org/SJTUThesis/README.pdf" target="_blank" rel="external">README.pdf</a>，主要思路就是把各章、摘要、参考文献等分为不同的tex文件，图表等资源放在一处文件夹内，逐个引用，有全局的的设置文件，编译时将这些零件拼接为pdf，后续会添加更多心得。</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ol><li><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">MathJax basic tutorial and quick reference - Mathematics Meta Stack Exchange</a>：一个常用Latex公式符号的全集</li><li>如果上面没找到，可以试试这里，手写识别latex字符<a href="http://detexify.kirelabs.org/classify.html" target="_blank" rel="external">Detexify LaTeX handwritten symbol recognition</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/15180252634406.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;用 Tex 写（中文）毕业论文全攻略，高效、便捷、优雅！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tex" scheme="http://frankchen.xyz/tags/Tex/"/>
    
  </entry>
  
</feed>
